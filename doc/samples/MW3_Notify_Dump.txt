Dumped By Extinct

ent notify( "returned", msg );
ent notify( "die" );
ent notify( "die" );
ent notify( "die" );
ent notify( "die" );
self notify( "returned", "timeout" );
level notify( "exploding_" + num );
self notify( "stop sound" + alias );
level notify( "createfx_common_done" );
level notify( "new_ent_selection" );
level notify( "new_ent_selection" );
level notify( "createfx_exploder_reset" );
ent notify( "stop_loop" );
self notify( "highlight change" );
self notify( "highlight change" );
level notify( "new_ent_selection" );
level notify( "new_ent_selection" );
level notify( "new_createfx_centerprint" );
self notify( "stop_loop" );
self notify( "FX_State_Change" + partIndex );
self notify( "Health_Drain_State_Change" + partIndex );
self notify( "stop_damage_mirror" );
parent notify( "damage", damage, attacker, direction_vec, point, type, modelName, tagName );
self notify( "damage", amount, self, ( 0, 0, 0 ), ( 0, 0, 0 ), "MOD_UNKNOWN", modelName, tagName );
self notify( "remove_badplace" );
self notify( "exploded", attacker );
level notify( "destructible_exploded" );
self notify( "death", attacker, self.damage_type );
self notify( "damage", maxdamage, self, ( 0, 0, 0 ), explosionOrigin, "MOD_EXPLOSIVE", "", "" );
self notify( "stop_car_alarm" );
self notify( "stop_taking_damage" );
self.damageOwner notify( "destroyed_car" );
level notify( "player_destroyed_car", self.damageOwner, damageLocation );
self.damageOwner notify( "destroyed_car" );
level notify( "player_destroyed_car", self.damageOwner, damageLocation );
self notify( "destroyed" );
level notify( "set_disable_friendlyfire_value_delayed" );
self notify( "damage", 100000, self, self.origin, self.origin, "MOD_EXPLOSIVE", "", "" );
self notify( "stop sound" + alias );
self notify( "damage", damage, attacker, direction_vec, point, damageType, modelName, tagName );
self notify( "stop_car_alarm" );
level notify( "new_destructible_spotlight" );
self notify( "FX_State_Change" + partIndex );
level notify( "handle_destructible_frame_queue" );
].destructible notify( "queue_processed", true );
].destructible notify( "queue_processed", false );
self notify( "start_flyby" );
self notify( "flyby_done" );
plane notify( "stop sound" + "veh_mig29_close_loop" );
plane notify( "stop sound" + "veh_mig29_dist_loop" );
self notify( "death" );
self notify( "weapon_triggered" );
self notify( "dmg_triggered" );
self notify( "touch_triggered" );
self notify( "motion_light_timeout" );
self notify( "motion_light_timeout" );
self.copier notify( "bar_goes" );
self.copier notify( "light_on" );
trigger notify( "trigger_enter", self );
self notify( "trigger_enter", trigger );
self notify( "trigger_leave", trigger );
trigger notify( "trigger_leave", self );
trigger notify( "trigger_empty" );
self notify( "floor_override" );
inside_trigger notify( "trigger", "elevator_called" );
inside_trigger.motion_trigger notify( "trigger", "elevator_called" );
self notify( "interrupt_watch" );
level notify( "elevator_interior_button_pressed" );
self notify( "interrupted" );
self notify( "elevator_moving" );
self notify( "elevator_moved" );
self notify( "closing_inner_doors" );
self notify( "closed_inner_doors" );
self notify( "opening_inner_doors" );
self notify( "opened_inner_doors" );
self notify( "closing_floor_" + floor_num + "_outer_doors" );
self notify( "closed_floor_" + floor_num + "_outer_doors" );
level notify( "elevator_doors_opening" );
self notify( "opening_floor_" + floor_num + "_outer_doors" );
self notify( "opened_floor_" + floor_num + "_outer_doors" );
self notify( "disable_trigger" );
self notify( "stop_loop" );
self notify( "stop_loop" );
level.active_button notify( "select_button_pressed" );
button notify( "remove_button" );
self notify("menuresponse", game["menu_team"], team);
self notify("menuresponse", "changeclass", class);
changingPlayer notify( "changed_defcon" );
attacker notify( "emp_hit" );
self notify( "applyEmp" );
self notify( "empGrenadeTimedOut" );
self notify( "empGrenadeDeathWaiter" );
self notify("emp_rumble_loop");
self notify( "kill_entity_headicon_thread" );
self notify( "kill_entity_headicon_thread" );
self notify( "process", challengeName );
attacker notify( "flash_hit" );
self notify("stop_monitoring_flash");
self notify("flash_rumble_loop");
self notify( "stop_lockon_sound" );
self notify( "stop_lockon_sound" );
self notify( "stop_lockon_sound" );
level notify( "killexplodertridgers" + trigger.script_exploder );
level notify( "matchevent_started" );
self notify( "leftTrigger");
self notify( "stop_javelin_locking_feedback" );
self notify( "stop_javelin_locked_feedback" );
self notify( "stop_javelin_locking_feedback" );
self notify( "stop_location_selection", reason );
//self notify( "lower_message_set" );
self notify( "message_cleared" );
self notify( "message_cleared" );
self notify( "using_remote" );
self notify( "stopped_using_remote" );
level notify( "juggernaut_equipped", self );
level notify( "arena_flag_time" );
level notify( "down_to_one" );
level notify( "down_to_one" );
player notify( "objective", "captured" );
level.dogtags[victim.guid] notify( "reset" );
self notify( "reset" );
//self notify( "objective", event );
self notify( "timeout" );
level.dogtags[guid] notify( "reset" );
player notify( "objective", "captured" );
self notify( "lost_juggernaut" );
self notify( "lost_juggernaut" );
player notify( "objective", "captured" );
self.visuals[0] notify( "stopTicking" );
self notify( "defused" );
level notify("bomb_exploded" + self.label);
level notify("bomb_defused" + siteDefused.label);
player notify( "objective", "captured" );
player notify( "objective", "assistedCapture" );
level notify( "reset_grnd_drops" );
self notify( "stop_counting" );
self notify( "stop_counting" );
self notify( "reload" );
first notify( "lost_juggernaut" );
self notify( "lost_juggernaut" );
self notify( "oic_waitGiveAmmo" );
player notify( "force_spawn" );
player notify( "objective", "captured" );
level notify( "hq_captured" );
level notify( "hq_destroyed" );
level notify( "hq_destroyed" );
level notify("hq_reset");
level notify("awardHQPointsRunning");
player notify( "objective", "captured" );
self notify( "lost_juggernaut" );
self notify( "lost_juggernaut" );
level notify("bomb_defused");
self notify( "lost_juggernaut" );
self notify( "lost_juggernaut" );
level notify("bomb_defused");
attacker notify( "objective", "kill_carrier" );
player notify( "dropped_flag" );
player notify( "objective", "captured" );
self notify( "lost_juggernaut" );
self notify( "lost_juggernaut" );
self notify( "lost_juggernaut" );
self notify( "graceComplete" );
self notify( "waitSkipped" );
self notify( "stoppedFiring" );
self notify( "suppressWaiter" );
self notify("disconnect");
level notify( "ai_killed", self );
attacker notify( "got_killstreak" , attacker.pers["cur_kill_streak"] );
victim notify( "killed_player" );
attacker.vehicle notify( "killedPlayer", victim );
attacker notify( "crushed_enemy" );
victim notify( "death_delay_finished" );
level notify( "player_eliminated", victim );
level notify( "final_killcam_done" );
level notify( "final_killcam_done" );
level notify( "final_killcam_done" );
victim notify( "emp_grenaded", eAttacker );
victim notify( "survived_explosion", eAttacker );
level notify( "ai_pain", victim );
level notify( "ai_crawling", self );
self notify( "revive" );
level.players[0] notify( "lost_juggernaut" );
player notify( "confirm_location", level.mapCenter, 0 );
level notify( "hostmigration_enoughplayers" );
self notify( "confirm_location", level.mapCenter, 0 );
self notify( "place_ims" );
self notify( "place_sentry" );
self notify( "place_turret" );
self notify( "place_tank" );
self notify( "place_carryRemoteUAV" );
notBot notify( "devStopWeaponXP" );
notBot notify( "devStopPlayerXP" );
player notify("gambit_on");
level notify("end_draw_map_bounds");
level notify("end_draw_map_bounds");
self notify("menuresponse", game["menu_team"], team);
self notify("menuresponse", "changeclass", class);
level notify("hide_spawnpoints");
self notify( "death" );
self notify( "death" );
level notify( "match_forfeit_timer_beginning" );
level notify( "abort_forfeit" );
level notify( "abort_forfeit" );
level notify( "match_ending_soon", "score" );
level notify( "match_ending_soon", "score" );
level notify( "match_start_timer_beginning" );
player notify( "reset_outcome" );
level notify( "game_cleanup" );
player notify( "reset_outcome" );
level notify( "game_cleanup" );
level notify( "exitLevel_called" );
self notify("perks_hidden");
self notify("stop_ticking");
level notify("prematch_over");
player notify( "done_using" );
objPoint notify( "stop_flashing_thread" );
self notify( "hideWorldIconOnGameEnd" );
self notify("carrier_cleared");
self.visuals[index] notify("changing_solidness");
self notify("changing_solidness");
self notify("disabled");
level notify( "game_ended" );
self notify( "breathingManager" );
self notify( "healthRegeneration" );
self notify( "waiting_to_stop_remote" );
level notify( "host_migration_begin" );
level notify( "host_migration_end" );
self notify("abort_killcam");
self notify("abort_killcam");
self notify("abort_killcam");
self notify("abort_killcam");
self notify("killcam_ended");
self notify( "joined_spectators" );
level notify( "joined_team" );
self notify( "joined_team" );
level notify( "joined_team" );
self notify("end_respawn");
self notify("end_respawn");
self notify("end_respawn");
self notify( "clearing_expID_" + expID );
data.attacker notify( "playerKilledChallengesProcessed" );
self notify( "destroyed_explosive" );
self notify( "begin_airstrike" );
self notify( "destroyed_car" );
self notify( "destroyed_helicopter" );
self notify( "healed" );
self notify( "predicting_about_to_spawn_player" );
self notify( "used_predicted_spawnpoint" );
self notify( "spawned" );
self notify( "end_respawn" );
self notify( "spawned_player" );
self notify( "spawned" );
self notify( "end_respawn" );
level notify( "connecting", self );
level notify( "connected", self );
level notify( "hostmigration_enoughplayers" );
self notify("stop_wait_safe_spawn_button");
self notify("perks_hidden");
self notify("perks_hidden");
self notify("perks_hidden");
self notify("spawned");
self notify("end_respawn");
self notify("joined_spectators");
self notify("spawned");
self notify("end_respawn");
self notify( "end_monitorPortableRadarUse" );
portable_radar notify( "death" );
attacker notify( "destroyed_explosive" );
self notify( "xpPointsPopup" );
self notify( "xpEventPopup" );
self notify("update_rank");
self notify("update_weapon_rank");
self notify( "end_monitorScramblerUse" );
scrambler notify( "death" );
attacker notify( "destroyed_explosive" );
level notify( "end_spawn_graph" );
level notify( "spawn_graph_stop_draw" );
level notify( "spawn_graph_stop_draw" );
spawnpoint notify( "debug_stop_LOS" );
level notify("drawing_spawn_data");
level notify("stop_spawn_profile");
level notify("stop_spawn_weight_debug");
destPlayer notify( "scavenger_pickup" );
level notify( "smokeTimesUp" );
ent notify( "emp_damage", self.owner, 8.0 );
self notify( "disabled" );
self notify( "enabled" );
self notify( "disabled" );
self notify( "enabled" );
self notify( "death" );
player notify( "triggered_claymore" );
self notify( "activated" );
self notify( "alt_detonate" );
self notify( "detonated" );
self notify( "detonated" );
attacker notify( "destroyed_explosive" );
attacker notify( "destroyed_explosive" );
trigger notify( "end_detection" );
trigger notify( "end_detection" );
self.entity notify( "damage", iDamage, eAttacker, ( 0, 0, 0 ), ( 0, 0, 0 ), "MOD_EXPLOSIVE", "", "", "", undefined, sWeapon );
eAttacker notify( "stun_hit" );
self notify( "concussed", eAttacker );
self notify( "process", "ch_bullseye" );
self notify( "mine_destroyed" );
attacker notify( "destroyed_explosive" );
attacker notify( "destroyed_explosive" );
self notify( "mine_triggered" );
player notify( "triggered_mine" );
self notify( "mine_selfdestruct" );
self notify( "used" );
self notify( "death" );
self notify( "stopShooting" );
self notify( "gone" );
self notify( "stopShooting" );
self notify("stopFindingTargets");
attacker notify( "destroyed_killstreak" );
level notify( "gun_fired_and_ready_105mm" );
self notify( "darkScreenOverlay" );
level notify("stop_rotatePlane_thread");
self notify( "markerDetermined" );
self notify( "markerDetermined" );
self notify( "beginAirdropViaMarker" );
self notify( "watchAirDropWeaponChange" );
self notify( "markerDetermined" );
self notify( "notAirDropWeapon" );
self notify( "watchAirDropMarkerUsage" );
self notify( "watchAirDropMarker" );
self notify( "beginAirDropMarkerTracking" );
self notify( "airDropMarkerActivate" );
chopper notify( "drop_crate" );
chopper notify( "leaving" );
chopper notify( "delete" );
self notify( "death" );
self notify( "helicopter_gone" );
attacker notify( "destroyed_helicopter" );
attacker notify( "destroyed_killstreak", weapon );
self notify( "drop_crate" );
level notify( "nukeCaptured", player );
self notify( "hijacker", crateType, crate.owner );
level notify( "debug_airstrike" );
plane notify( "delete" );
self notify( "stop_bombing" );
self notify( "stop_bombing" );
plane notify( "delete" );
self notify( "used" );
self notify( "death" );
self notify( "death" );
level notify("debugArtilleryDangerCenters_thread");
attacker notify( "destroyed_killstreak" );
self notify( "deleting" );
self notify( "deleting" );
self notify( "player_dismount" );
self notify( "not_overheated" );
self notify( "death" );
self notify( "stop_shooting" );
self notify( "not_overheated" );
self notify( "not_overheated" );
self notify( "playing_heat_fx" );
level notify( "sam_missile_fired", self.owner, rocket, self.samTargetEnt );
level notify( "sam_fired", self.owner, self.samMissileGroups[ missileGroup ], self.samTargetEnt );
self notify( "saveWeaponAmmoOnDeath" );
self notify( "watchMarkerUsage" );
self notify( "watchMarker" );
self notify( "beginMarkerTracking" );
self notify( "markerActivate" );
attacker notify( "destroyed_killstreak" );
self notify( "death" );
self notify( "deleting" );
self notify( "death" );
self notify( "captured", player );
self notify( "used_emp" );
level notify( "keepEMPTimeRemaining" );
heli notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
lb notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
turret notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
uav notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
level.ac130.planeModel notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
ims notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
ugv notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
heli notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
lb notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
turret notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
uav notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
level.ac130.planeModel notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
ims notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
ugv notify( "damage", damage, attacker, direction_vec, point, meansOfDeath, modelName, tagName, partName, iDFlags, weapon );
self notify( "markerDetermined" );
self notify( "used" );
self notify( "used" );
self notify( "hatch_down" );
self notify( "airshipFlyDefense");
self notify( "osprey_leaving" );
self notify( "aiShootPlayer" );
self notify( "target_killed" );
self notify( "airshipFlyGunner");
self notify( "helicopter_done" );
self notify( "drop_crate" );
self notify( "drop_crate" );
self notify( "drop_crate" );
self notify( "drop_crate" );
self notify( "drop_crate" );
self notify( "drop_crate" );
self notify( "drop_crate" );
self notify( "drop_crate" );
self notify( "engageGround" );
self notify( "leaving" );
self notify( "randomHarrierMovement" );
self notify( "randMove" );
self notify( "acquiringTarget" );
self notify( "watchTargetDeath" );
self notify( "newTarget" );
self notify( "harrierGetTargets" );
attacker notify( "destroyed_killstreak" );
self notify( "newTarget" );
self notify( "acquiringVehTarget" );
self notify( "newTarget" );
self notify("stopRand");
self notify("stopfiring");
self notify("death");
self notify("stopfiring");
self notify( "stop_shooting" );
self notify( "helicopter_done" );
self notify( "helicopter_removed" );
self notify( "primary acquired" );
self notify( "secondary acquired" );
validAttacker notify( "destroyed_helicopter" );
self notify( "crashing" );
self notify( "death" );
self notify( "missile fired" );
self notify( "missile fired" );
self notify( "flying");
self notify( "flying");
self notify( "flying");
self notify( "leaving" );
self notify( "death" );
self notify( "cancel_location" );
self notify( "used" );
lb notify( "gone" );
self notify( "death" );
attacker notify( "destroyed_helicopter" );
attacker notify( "destroyed_killstreak", weapon );
self notify( "lbSupport_moveToPlayer" );
self notify( "hit_goal" );
self notify( "leaving" );
self notify( "gone" );
attacker notify( "destroyed_helicopter" );
attacker notify( "destroyed_killstreak", weapon );
self notify( "stop_shooting" );
attacker notify( "destroyed_killstreak" );
self notify( "deleting" );
self notify( "deleting" );
self notify( "death" );
self.ims notify( "carried" );
ims notify( "death" );
targetEnt notify( "triggered_ims" );
self notify( "death" );
level notify( "juggernaut_equipped", self );
self notify( "jugdar_removed" );
self notify( "jugg_removed" );
self notify( "killstreakUseWaiter" );
self notify( "waitTakeKillstreakWeapon" );
self notify( "received_earned_killstreak" );
self notify( "picked_location" );
self notify( "leaving" );
mobileMortar notify( "mortar_fire_done" );
validAttacker notify( "destroyed_helicopter" );
validAttacker notify( "destroyed_killstreak", weapon );
self notify( "used_nuke" );
level notify( "nuke_death" );
self notify( "stop_location_selection" );
level notify( "EMP_JamTeam" + "axis" );
level notify( "EMP_JamTeam" + "allies" );
level notify( "EMP_JamPlayers" );
level notify( "nuke_EMPJam" );
level notify( "nuke_emp_update" );
level notify( "nuke_emp_update" );
level notify( "keepNukeEMPTimeRemaining" );
self notify( "removed_reaper_ammo" );
remote notify( "helicopter_done" );
self notify( "remote_removed" );
self notify( "remote_done" );
attacker notify( "destroyed_killstreak", weapon );
self notify( "death" );
self notify( "death" );
owner notify( "end_remote" );
self notify( "death" );
self notify( "death" );
self notify( "death" );
attacker notify( "destroyed_killstreak", weapon );
self notify( "death" );
self notify( "clearlowermessage" );
turret notify( "death" );
owner notify( "clearlowermessage" );
owner notify( "clearlowermessage" );
self notify( "exit" );
self notify( "clearlowermessage" );
turret notify( "death" );
owner notify( "clearlowermessage" );
self notify( "death" );
self notify( "deleting" );
attacker notify( "destroyed_killstreak" );
self notify( "stunned" );
self notify( "place_carryRemoteUAV" );
self notify( "remoteuav_unlock" );
self notify( "remoteuav_unlock" );
self notify( "remoteuav_unlock" );
remoteUAV notify( "end_remote" );
remoteUAV notify( "end_launch_dialog" );
remoteUAV notify( "end_rumble" );
self notify( "in_range" );
self notify( "death" );
self notify( "death" );
self notify( "death" );
self notify( "leaving" );
self notify( "death" );
validAttacker notify( "destroyed_killstreak", weapon );
self notify( "death" );
self notify( "death" );
self notify( "death" );
self notify( "death" );
self notify( "tankDestroyed" );
self notify( "onTargOrTimeOut" );
self notify( "killedTarget" );
self notify( "abandonedTarget" );
self notify( "targetRemoved" );
self notify( "acquiringMiniTarget" );
self notify( "killedMiniTarget" );
self notify( "abandonedMiniTarget" );
UAVModel notify( "leaving" );
self notify( "uav_strike_cancel" );
self notify( "uav_strike_used" );
self notify( "uav_strike_successful" );
attacker notify( "destroyed_killstreak" );
self notify( "death" );
self notify( "used_counter_uav" );
self notify( "used_double_uav" );
self notify( "used_triple_uav" );
self notify( "used_directional_uav" );
self notify( "used_uav" );
level notify( "radar_status_change", team );
player notify( "killstreak_destroyed" );
self notify("deleted");
self notify( "endAutoSpotAdsWatcher" );
self notify( "endDoubleLoad" );
self notify( "end_SteadyAimPro" );
self notify( "stopEndGame" );
self notify( "end_monitorTIUse" );
attacker notify( "destroyed_explosive" );
player notify( "destroyed_explosive" );
self notify( "painted_again" );
self notify( "watchStoppingPowerKill" );
self notify( "watchStoppingPowerKill" );
self notify( "give_light_armor" );
self notify( "remove_light_armor" );
self notify( "stopRevenge" );
self notify( "stopRevenge" );
self notify( "stopRevenge" );
self notify( "stopRevenge" );
self notify( "stopRevenge" );
self notify("unset_juiced");
self notify( "proxyPerkPlayerDiscoWaiter" );
newPlayer notify( "removedFromProxy" );
self notify( "combathigh_survived" );
