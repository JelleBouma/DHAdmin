<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfinityScript</name>
    </assembly>
    <members>
        <member name="M:InfinityScript.GSCFunctions.AnimHasNoteTrack(System.String,System.String)">
            <summary>
            Queries the given animation for a note track.
            </summary>
            <param name="animation">An animation.</param>
            <param name="noteTrackName">Name of a note track.</param>
            <example>
            <code lang="c#">
                <![CDATA[
                if (AnimHasNoteTrack(facialanim, "dialogue"))
                {
                    // ...
                }
                ]]>
            </code>
            </example>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetAngleDelta(System.String,System.Single,System.Single)">
            <summary>
            Gets the rotation difference in an <see cref="!:Animation"/>.
            </summary>
            <param name ="animation">An animation.</param>
            <param name="startTime">Starting time.</param>
            <param name="endTime">Ending time.</param>
            <returns>Returns the rotation difference in the given animation.</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetAnimLength(System.String)">
            <summary>
            Gets the length of an <see cref="!:Animation"/>.
            </summary>
            <param name="primitiveAnimation">A primitive animation.</param>
            <returns>Returns the length of the given animation.</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetMoveDelta(System.String,System.Single,System.Single)">
            <summary>
            Gets the movement vector difference in an <see cref="!:Animation"/>.
            </summary>
            <param name="animation">An animation.</param>
            <param name="startTime">Starting time.</param>
            <param name="endTime">Ending time.</param>
            <returns>Returns the movement vector difference of the given animation.</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetNoteTrackTimes(System.String,System.String)">
            <summary>
            Gets an array of the times during an <see cref="!:Animation"/> that the given NoteTrack occurs.
            </summary>
            <param name="animation">An animation.</param>
            <param name="noteTrackName">A NoteTrack name.</param>
            <returns>Returns an array containing the times where the NoteTrack occurs.</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetNumParts(System.String)">
            <summary>
            Gets the number of bones in an xModel.
            </summary>
            <param name="model">An xModel name.</param>
            <returns>Returns the amount of bones within an xModel.</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetPartName(System.String,System.Int32)">
            <summary>
            Gets the name of a part of a model.
            </summary>
            <param name="model">An xModel name.</param>
            <param name="index">The bone index (must be less than the total amount of bones).</param>
            <returns>Returns the name of the indexth bone.</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetTagAngles(InfinityScript.Entity,System.String)">
            <summary>
            Gets the angles of a particular tag of this model.
            </summary>
            <param name="tagName"></param>
            <returns>Returns the angle of the given tag</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetTagOrigin(InfinityScript.Entity,System.String)">
            <summary>
            Gets the origin of a particular tag of this model.
            </summary>
            <param name="tagName"></param>
            <returns>Returns the origin of the given tag</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ScriptModelPlayAnim(InfinityScript.Entity,System.String)">
            <summary>
            Plays an <see cref="!:Animation"/> on this entity
            </summary>
            <param name="animation"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ScriptModelClearAnim(InfinityScript.Entity)">
            <summary>
            Clears this entity's current animation
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetCorpseAnim(InfinityScript.Entity)">
            <summary>
            Gets the animation of a corpse
            </summary>
            <returns>Returns the name of the anim used by this corpse</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AllClientsPrint(System.String)">
            <summary>
            Prints the given string to all clients.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AllowSpectateTeam(InfinityScript.Entity,System.String,System.Boolean)">
            <summary>
            Sets whether the player can spectate the given team.
            </summary>
            <param name="team"></param>
            <param name="canSpectate"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Announcement(System.String)">
            <summary>
            Sends an announcement to all clients.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.BeginLocationSelection(InfinityScript.Entity,System.String)">
            <summary>
            Causes the player to begin selecting a location. A map HUD element should be visible for them to see where they're selecting.
            When the user confirms or cancels, they will recieve a "confirm_location" or "cancel_location". The former notify contains the location they selected, as a Vector3.
            </summary>
            <param name="entref"></param>
            <param name="locationSelector"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.BeginLocationSelection(InfinityScript.Entity,System.String,System.Single)">
            <summary>
            Causes the player to begin selecting a location. A map HUD element should be visible for them to see where they're selecting.
            When the user confirms or cancels, they will recieve a "confirm_location" or "cancel_location". The former notify contains the location they selected, as a Vector3.
            </summary>
            <param name="entref"></param>
            <param name="locationSelector"></param>
            <param name="selectorSize"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClientAnnouncement(InfinityScript.Entity,System.String)">
            <summary>
            Sends an announcement to a single client.
            </summary>
            <param name="entref"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClientPrint(InfinityScript.Entity,System.String)">
            <summary>
            Print a localized version of this string for a given client.
            </summary>
            <param name="entref"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClonePlayer(InfinityScript.Entity,System.Int32)">
            <summary>
            Clone the player's model for death animations.
            </summary>
            <param name="entref"></param>
            <param name="duration"></param>
            <returns>Returns the cloned player model as an Entity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DisableWeapons(InfinityScript.Entity)">
            <summary>
            Disable the player's weapon.
            </summary>
            <param name="entref"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DropItem(InfinityScript.Entity,System.String)">
            <summary>
            Drop an item with the given item name.
            </summary>
            <param name="entref"></param>
            <param name="itemName"></param>
            <returns>Returns the dropped item as an Entity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.EnableWeapons(InfinityScript.Entity)">
            <summary>
            Enable the player's weapon.
            </summary>
            <param name="entref"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.EndLocationSelection(InfinityScript.Entity)">
            <summary>
            Causes the player to leave location selection mode.
            </summary>
            <param name="entref"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetViewmodel(InfinityScript.Entity)">
            <summary>
            Get the viewmodel name for the given player.
            </summary>
            <param name="entref"></param>
            <returns>Returns the model name of the given player's viewmodel</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsMantling(InfinityScript.Entity)">
            <summary>
            Returns true if the player is mantling, false otherwise.
            </summary>
            <param name="entref"></param>
            <returns>Returns a bool of whether the player is mantling</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsOnLadder(InfinityScript.Entity)">
            <summary>
            Returns true if the player is on a ladder, false otherwise.
            </summary>
            <param name="entref"></param>
            <returns>Returns a bool of whether the player is on a ladder or not</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsPlayerNumber(InfinityScript.Entity,System.Int32)">
            <summary>
            Returns true if the given int is a valid client number.
            </summary>
            <param name="number"></param>
            <returns>Returns a bool of whether the int is a valid client number or not</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsRagdoll(InfinityScript.Entity)">
            <summary>
            Returns true if the entity is a ragdoll body, false otherwise.
            </summary>
            <param name="entref"></param>
            <returns>Returns a bool of whether the given entity is a ragdoll body or not</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsTalking(InfinityScript.Entity)">
            <summary>
            Returns true if the player is talking via voice chat.
            </summary>
            <param name="entref"></param>
            <returns>Returns a bool of whether the given player is talking or not via voice chat</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Kick(InfinityScript.Entity)">
            <summary>
            Kicks the specified player.
            </summary>
            <param name="entref"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakeDvarServerInfo(System.String,InfinityScript.Parameter)">
            <summary>
            Flags a Dvar with the DVAR_CODINFO flag.
            </summary>
            <param name="dvar"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SayAll(InfinityScript.Entity,System.String)">
            <summary>
            Write a client chat message from this client to everybody.
            </summary>
            <param name="entref"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SayTeam(InfinityScript.Entity,System.String)">
            <summary>
            Write a client chat message from this client to everybody on their team.
            </summary>
            <param name="entref"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetRank(InfinityScript.Entity,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Sets the player's rank and prestige level.
            </summary>
            <param name="entref"></param>
            <param name="rank"></param>
            <param name="prestige"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetSpawnWeapon(InfinityScript.Entity,System.String)">
            <summary>
            Sets the weapon that this player will spawn with.
            </summary>
            <param name="entref"></param>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTeamForTrigger(InfinityScript.Entity,System.String)">
            <summary>
            Set the team that this trigger will react to
            </summary>
            <param name="trigger"></param>
            <param name="team"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ShowScoreBoard(InfinityScript.Entity)">
            <summary>
            Updates the scoreboard data on a given client.
            </summary>
            <param name="entref"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StartRagdoll(InfinityScript.Entity)">
            <summary>
            Begin ragdoll physics for this entity. Does nothing if the entity is already a ragdoll.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Suicide(InfinityScript.Entity)">
            <summary>
            Kills the player immediately as a suicide.
            </summary>
            <param name="entref"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.UpdateDMScores(InfinityScript.Entity)">
            <summary>
            Updates the client's knowledge of scores for theirself and the (next) best player in the game. For use in Free-For-All.
            </summary>
            <param name="entref"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.UpdateScores(InfinityScript.Entity)">
            <summary>
            Updates the client's knowledge of team scores.
            </summary>
            <param name="entref"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.FinishPlayerDamage(InfinityScript.Entity,InfinityScript.Entity,InfinityScript.Entity,System.Int32,System.Int32,System.String,System.String,InfinityScript.Vector3,InfinityScript.Vector3,System.String,System.Single)">
            <summary>
            Does damage to the player
            </summary>
            <param name="entref"></param>
            <param name="inflictor"></param>
            <param name="attacker"></param>
            <param name="damage"></param>
            <param name="damageFlags"></param>
            <param name="meansOfDeath"></param>
            <param name="weapon"></param>
            <param name="point"></param>
            <param name="direction"></param>
            <param name="hitLocation"></param>
            <param name="offsetTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GlassRadiusDamage(InfinityScript.Vector3,System.Int32,System.Int32,System.Int32,InfinityScript.Entity)">
            <summary>
            TBD
            </summary>
            <param name="origin"></param>
            <param name="range"></param>
            <param name="maxDamage"></param>
            <param name="minDamage"></param>
            <param name="attacker"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RadiusDamage(InfinityScript.Vector3,System.Int32,System.Int32,System.Int32,InfinityScript.Entity)">
            <summary>
            Does damage to all damageable objects within a given radius. The amount of damage is linear according to how close the object is to the radius.
            </summary>
            <param name="origin"></param>
            <param name="range"></param>
            <param name="maxDamage"></param>
            <param name="minDamage"></param>
            <param name="attacker"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RadiusDamage(InfinityScript.Entity,InfinityScript.Vector3,System.Int32,System.Int32,System.Int32,InfinityScript.Entity,System.String,System.String)">
            <summary>
            Does damage to all damageable objects within a given radius from this entity. The amount of damage is linear according to how close the object is to the radius.
            </summary>
            <param name="origin"></param>
            <param name="range"></param>
            <param name="maxDamage"></param>
            <param name="minDamage"></param>
            <param name="attacker"></param>
            <param name="meansOfDeath"></param>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetCanDamage(InfinityScript.Entity,System.Boolean)">
            <summary>
            Set the 'candamage' flag for this entity. This means that it can respond to notifies from bullets and grenade hits.
            </summary>
            <param name="entity"></param>
            <param name="canDamage"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetCanRadiusDamage(InfinityScript.Entity,System.Boolean)">
            <summary>
            Set the 'canradiusdamage' flag for this entity. This means that it can respond to notifies from explosions and radius damages.
            </summary>
            <param name="entity"></param>
            <param name="canRadiusDamage"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetPlayerIgnoreRadiusDamage(System.Boolean)">
            <summary>
            Sets whether the player should ignore radius damage or not
            </summary>
            <param name="entref"></param>
            <param name="ignoreRadiusDamage"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsExplosiveDamageMOD(System.String)">
            <summary>
            Checks if the passed in means of death is an explosive damage
            </summary>
            <param name="mod"></param>
            <returns>Returns true if the given means of death is an explosive damage</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AddTestClient">
            <summary>
            Adds a test client to the map and returns a reference to that client.
            </summary>
            <returns>Returns the test client as an <see cref="T:InfinityScript.Entity"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Assert(System.Boolean)">
            <summary>
            Assert that the given statement is correct. The function will throw a script error if this is false.
            </summary>
            <param name ="value">The statement to be correct.</param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AssertEx(System.Boolean,System.String)">
            <summary>
            Assert that the gven statement is correct. The function will throw a script error if this is false, with the given message.
            </summary>
            <param name ="value">The statement to be correct</param>
            <param name ="message">Error message</param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AssertMsg(System.String)">
            <summary>
            Throws a script error with the given message.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IPrintLn(System.String)">
            <summary>
            Write a line to the screen.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IPrintLnBold(System.String)">
            <summary>
            Write a bold line to the screen.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Line(InfinityScript.Vector3,InfinityScript.Vector3,System.Nullable{InfinityScript.Vector3},System.Boolean,System.Int32)">
            <summary>
            Draw a debug line on screen.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="color"></param>
            <param name="depthTest"></param>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Print(System.String)">
            <summary>
            Write to the console.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Print3d(InfinityScript.Vector3,System.String,InfinityScript.Vector3)">
            <summary>
            Draw 3d text on screen
            </summary>
            <param name="origin"></param>
            <param name="text"></param>
            <param name="color"></param>
            <param name="alpha"></param>
            <param name="scale"></param>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PrintLn(System.String)">
            <summary>
            Write a line to the console.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetPrintChannel(System.String)">
            <summary>
            Set the current print channel.
            </summary>
            <param name="channel"></param>
            <returns>Returns the previous print channel</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.NoClip(InfinityScript.Entity)">
            <summary>
            Enables or disables no clip for this player
            </summary>
            <param name="noclip"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Ufo(InfinityScript.Entity)">
            <summary>
            Enables or disables ufo mode for this player
            </summary>
            <param name="ufo"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetBuildVersion">
            <summary>
            Gets the game's current build version
            </summary>
            <returns>Returns the game's current build version number</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetBuildNumber">
            <summary>
            Gets the game's current build number
            </summary>
            <returns>Returns the game's current build number</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetSystemTime">
            <summary>
            Gets the host's system's current time
            </summary>
            <returns>Returns the host's system's current time</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CreatePrintChannel(System.String)">
            <summary>
            Opens a print channel.
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetDvar(System.String)">
            <summary>
            Gets the value of a dvar as a string.
            </summary>
            <param name="dvar"></param>
            <returns>Returns the value of the given dvar as a string</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetDvarFloat(System.String)">
            <summary>
            Gets the value of a dvar as a float.
            </summary>
            <param name="message"></param>
            <returns>Returns the value of the given dvar as a float</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetDvarInt(System.String)">
            <summary>
            Gets the value of a dvar as an integer.
            </summary>
            <param name="dvar"></param>
            <returns>Returns the value of the given dvar as an int</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetDvar(System.String,InfinityScript.Parameter)">
            <summary>
            Sets the value of a script dvar. Cannot set code dvars.
            </summary>
            <param name="dvar"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetDynamicDvar(System.String,InfinityScript.Parameter)">
            <summary>
            Sets a dynamic dvar
            </summary>
            <param name="dvar"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetDvarIfUninitialized(System.String,InfinityScript.Parameter)">
            <summary>
            Sets a dvar, only if the dvar has not been created yet
            </summary>
            <param name="dvar"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetDevDvar(System.String,InfinityScript.Parameter)">
            <summary>
            Sets a developer dvar
            </summary>
            <param name="dvar"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetDevDvarIfUninitialized(System.String,InfinityScript.Parameter)">
            <summary>
            Sets a dev dvar, only if the dvar has not been created yet
            </summary>
            <param name="dvar"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetDvarVector(System.String)">
            <summary>
            Gets a Dvar as a vector
            </summary>
            <param name="dvar"></param>
            <param name="value"></param>
            <returns>Gets the dvar value as a <see cref="T:InfinityScript.Vector3"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LoadFX(System.String)">
            <summary>
            Load the given effect
            </summary>
            <param name="effect"></param>
            <returns>Returns the ID of the loaded effect</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VisionSetNaked(System.String)">
            <summary>
            Sets the players' naked-eye vision. Optionally give a transition time from the current vision.
            </summary>
            <param name="vision"></param>
            <param name="transitionTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VisionSetNight(System.String)">
            <summary>
            Sets the vision preset to use for players' night vision view.
            </summary>
            <param name="vision"></param>
            <param name="transitionTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayFX(System.Int32,InfinityScript.Vector3,System.Nullable{InfinityScript.Vector3},System.Nullable{InfinityScript.Vector3})">
            <summary>
            Play this effect
            </summary>
            <param name="effect"></param>
            <param name="position"></param>
            <param name="forward"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayFXOnTag(System.Int32,InfinityScript.Entity,System.String)">
            <summary>
            Play this effect on the entity and tag.
            </summary>
            <param name="effect"></param>
            <param name="entity"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StopFXOnTag(System.Int32,InfinityScript.Entity,System.String)">
            <summary>
            Stop this effect on the entity and tag.
            </summary>
            <param name="effect"></param>
            <param name="entity"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayFXOnTagForClients(System.Int32,InfinityScript.Entity,System.String,InfinityScript.Entity)">
            <summary>
            Play this effect on the entity and tag for a specific client.
            </summary>
            <param name="effect"></param>
            <param name="entity"></param>
            <param name="tag"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VisionSetMissileCam(System.String)">
            <summary>
            Sets the vision preset for players while they are controlling a missile
            </summary>
            <param name="vision"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VisionSetThermal(System.String)">
            <summary>
            Sets the vision preset for players while they are scoped into a thermal scope
            </summary>
            <param name="vision"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VisionSetPain(System.String)">
            <summary>
            Sets the vision preset for players while they are in pain/near death
            </summary>
            <param name="vision"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetBlurForPlayer(InfinityScript.Entity,System.Single,System.Single)">
            <summary>
            Sets the players' naked-eye vision. Optionally give a transition time from the current vision.
            </summary>
            <param name="blur"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayLoopedFX(System.Int32,System.Single,InfinityScript.Vector3,System.Int32,System.Nullable{InfinityScript.Vector3},System.Nullable{InfinityScript.Vector3})">
            <summary>
            Plays an effect and loops it at the given origin for the given time value
            </summary>
            <param name="effect"></param>
            <param name="time"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SpawnFX(System.Int32,InfinityScript.Vector3)">
            <summary>
            Create an effect entity that can be re-triggered efficiently at arbitrary intervals. This doesn't play the effect. Use delete to free it when done.
            </summary>
            <param name="effect"></param>
            <param name="position"></param>
            <param name="forward"></param>
            <param name="up"></param>
            <returns>Returns the spawned effect as an <see cref="T:InfinityScript.Entity">Entity</see>"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SpawnFX(System.Int32,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Create an effect entity that can be re-triggered efficiently at arbitrary intervals. This doesn't play the effect. Use delete to free it when done.
            </summary>
            <param name="effect"></param>
            <param name="position"></param>
            <param name="forward"></param>
            <param name="up"></param>
            <returns>Returns the spawned effect as an <see cref="T:InfinityScript.Entity">Entity</see>"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TriggerFX(InfinityScript.Entity)">
            <summary>
            Replays the effect associated with the effect entity. This does not kill any existing effects.
            </summary>
            <param name="effect"></param>
            <param name="when"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TriggerFX(InfinityScript.Entity,System.Single)">
            <summary>
            Replays the effect associated with the effect entity. This does not kill any existing effects.
            </summary>
            <param name="effect"></param>
            <param name="when"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Delete(InfinityScript.Entity)">
            <summary>
            Deletes an entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Detonate(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Causes a grenade to explode. Must be called on a grenade.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DisableAimAssist(InfinityScript.Entity)">
            <summary>
            Disables aim assist on an entity. The entity must have a brush model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.EnableAimAssist(InfinityScript.Entity)">
            <summary>
            Enables aim assist on an entity. The entity must have a brush model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetEnt(System.String,System.String)">
            <summary>
            Looks up an entity by key and name
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <returns>Returns the entity found with the given key and name if any</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetEntArray(System.String,System.String)">
            <summary>
            Gets an array of entities that have the given key, name pair
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <returns>Returns the entities found with the given key and name in a <see cref="T:System.Array">Array</see>"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetEntByNum(System.Int32)">
            <summary>
            Gets an entity from its entity number
            </summary>
            <param name="entNum"></param>
            <returns>Returns the entity of the given entity number</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetEntityNumber(InfinityScript.Entity)">
            <summary>
            Get the entity number of this entity
            </summary>
            <returns>Returns the entity number of the given entity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetNormalHealth(InfinityScript.Entity)">
            <summary>
            Gets the normal health of this entity
            </summary>
            <returns>Returns the normal health value of this entity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetOrigin(InfinityScript.Entity)">
            <summary>
            Gets the origin of an entity
            </summary>
            <returns>Returns the origin of the given entity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Hide(InfinityScript.Entity)">
            <summary>
            Hides a visible entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.HidePart(InfinityScript.Entity,System.String,System.String)">
            <summary>
            Hide part of an entity
            </summary>
            <param name="tag"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsTouching(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Checks whether the entity is touching the passed in entity or trigger
            </summary>
            <param name="entity"></param>
            <returns>Returns true if the entity is touching the passed in entity/trigger</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LaserOff(InfinityScript.Entity)">
            <summary>
            Turns off entity's laser sight
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LaserOn(InfinityScript.Entity)">
            <summary>
            Turns on entity's laser sight
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LinkTo(InfinityScript.Entity,InfinityScript.Entity,System.String,System.Nullable{InfinityScript.Vector3},System.Nullable{InfinityScript.Vector3})">
            <summary>
            Attaches one entity to another
            </summary>
            <param name="entity"></param>
            <param name="tag"></param>
            <param name="originOffset"></param>
            <param name="anglesOffset"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LocalToWorldCoords(InfinityScript.Entity,InfinityScript.Vector3)">
            <summary>
            Transform the given local coordinate point to a world coordinate point
            </summary>
            <param name="localCoord"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetContents(InfinityScript.Entity,System.Int32)">
            <summary>
            Sets the contents of an entity
            </summary>
            <param name="contents"></param>
            <returns>Returns the old contents of the entity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetCursorHint(InfinityScript.Entity,System.String)">
            <summary>
            Sets a visible cursor near an objective
            </summary>
            <param name="hint"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetHintString(InfinityScript.Entity,System.String)">
            <summary>
            Sets the hint string for a usable entity
            </summary>
            <param name="hint"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetModel(InfinityScript.Entity,System.String)">
            <summary>
            Sets the model of the entity to the given model name
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetNormalHealth(InfinityScript.Entity,System.Int32)">
            <summary>
            Sets the normal health of this entity
            </summary>
            <param name="health"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Show(InfinityScript.Entity)">
            <summary>
            Shows a hidden entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ShowAllParts(InfinityScript.Entity)">
            <summary>
            Show all parts of an entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ShowPart(InfinityScript.Entity,System.String,System.String)">
            <summary>
            Show part of an entity
            </summary>
            <param name="tag"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ShowToPlayer(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Show the entity to a given client
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Unlink(InfinityScript.Entity)">
            <summary>
            Unlinks a linked entity from another entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.UseBy(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Uses the entity with the passed in entity as the activator
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.UseTriggerRequireLookAt(InfinityScript.Entity)">
            <summary>
            Modifies the use trigger so that it requires the user to be looking at it
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayFX(InfinityScript.Entity,System.Int32,InfinityScript.Vector3,System.Nullable{InfinityScript.Vector3},System.Nullable{InfinityScript.Vector3})">
            <summary>
            Play an effect so that it is attached to this entity
            </summary>
            <param name="effect"></param>
            <param name="position"></param>
            <param name="forward"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DropScavengerBag(InfinityScript.Entity,System.String)">
            <summary>
            Creates a scavenger bag from this entity and drops it
            </summary>
            <param name="item"></param>
            <returns>Returns a reference to the dropped scavenger bag an an <see cref="T:InfinityScript.Entity"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Attach(InfinityScript.Entity,System.String,System.String,System.Boolean)">
            <summary>
            Attaches a model to an entity
            </summary>
            <param name="model"></param>
            <param name="tag"></param>
            <param name="ignoreCollision"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Detach(InfinityScript.Entity,System.String,System.String)">
            <summary>
            Detaches a model to an entity
            </summary>
            <param name="model"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DetachAll(InfinityScript.Entity)">
            <summary>
            Detaches all attached model from an entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AttachShieldModel(InfinityScript.Entity,System.String,System.String)">
            <summary>
            Attaches the riot shield model to the given tag
            </summary>
            <param name="model"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DetachShieldModel(InfinityScript.Entity,System.String,System.String)">
            <summary>
            Detaches the riot shield model from the given tag
            </summary>
            <param name="model"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MoveShieldModel(InfinityScript.Entity,System.String,System.String,System.String)">
            <summary>
            Moves the attached riot shield model from the first tag to the second tag
            </summary>
            <param name="model"></param>
            <param name="tag1"></param>
            <param name="tag2"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetAttachSize(InfinityScript.Entity)">
            <summary>
            Gets the number of attached models for this entity
            </summary>
            <returns>Returns the number of attached models on the given entity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetAttachModelName(InfinityScript.Entity,System.Int32)">
            <summary>
            Gets the name of the attached model at the given attachment slot
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:InfinityScript.GSCFunctions.GetAttachTagName(InfinityScript.Entity,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:InfinityScript.GSCFunctions.GetAttachIgnoreCollision(InfinityScript.Entity,System.Int32)" -->
        <member name="M:InfinityScript.GSCFunctions.HidePart_AllInstances(InfinityScript.Entity,System.String)">
            <summary>
            TBD
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.HideAllParts(InfinityScript.Entity)">
            <summary>
            Hides all extra parts of this entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LinkToBlendToTag(InfinityScript.Entity,InfinityScript.Entity,System.String)">
            <summary>
            Attaches one entity to another at the tag by blending (TBD)
            </summary>
            <param name="entity"></param>
            <param name="tag"></param>
            <param name="originOffset"></param>
            <param name="anglesOffset"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LinkToBlendToTag(InfinityScript.Entity,InfinityScript.Entity,System.String,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Attaches one entity to another at the tag by blending (TBD)
            </summary>
            <param name="entity"></param>
            <param name="tag"></param>
            <param name="originOffset"></param>
            <param name="anglesOffset"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsLinked(InfinityScript.Entity)">
            <summary>
            Checks if this entity is currently linked to another entity
            </summary>
            <returns>Returns true if this entity is linked to another entity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.EnableLinkTo(InfinityScript.Entity)">
            <summary>
            Enables LinkTo() for an entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LaserAltViewOn(InfinityScript.Entity)">
            <summary>
            Turns on the laser for the alt view(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LaserAltViewOff(InfinityScript.Entity)">
            <summary>
            Turns off the laser for the alt view(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakeUsable(InfinityScript.Entity)">
            <summary>
            Makes this entity usable to players
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakeUnUsable(InfinityScript.Entity)">
            <summary>
            Makes this entity unusable to players
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetEntityVelocity(InfinityScript.Entity)">
            <summary>
            Gets the velocity of this entity
            </summary>
            <returns>Returns the current velocity of this entity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTargetEnt(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets the target entity of a turret or missile
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTargetPos(InfinityScript.Entity,InfinityScript.Vector3)">
            <summary>
            Sets the target position of a turret or missile
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClearTarget(InfinityScript.Entity)">
            <summary>
            Clears the current target of this turret or missile
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetFlightModeDirect(InfinityScript.Entity)">
            <summary>
            Sets a missile to fly directly toward it's target
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetFlightModeTop(InfinityScript.Entity)">
            <summary>
            Sets a missile to fly up in an arc and then come back down to hit it's target on top
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetLightIntensity(InfinityScript.Entity)">
            <summary>
            Gets the intensity of a light entity
            </summary>
            <returns>Returns the intensity of this light entity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetLightIntensity(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the intensity of a light entity
            </summary>
            <param name="intensity"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CameraLinkTo(InfinityScript.Entity,InfinityScript.Entity,System.String)">
            <summary>
            Attaches the player's camera to an entity
            </summary>
            <param name="entity"></param>
            <param name="tag"></param>
            <param name="originOffset"></param>
            <param name="anglesOffset"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CameraLinkTo(InfinityScript.Entity,InfinityScript.Entity,System.String,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Attaches the player's camera to an entity
            </summary>
            <param name="entity"></param>
            <param name="tag"></param>
            <param name="originOffset"></param>
            <param name="anglesOffset"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CameraUnlink(InfinityScript.Entity)">
            <summary>
            Unlink the player's camera from an entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ControlsLinkTo(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Links this player's controls to an entity so that any player input is directed to the linked entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ControlsUnlink(InfinityScript.Entity)">
            <summary>
            Unlink the player's controls from an entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakeVehicleSolidCapsule(InfinityScript.Entity,System.Single,System.Single,System.Single)">
            <summary>
            Makes a vehicle solid with capsule size
            </summary>
            <param name="xRadius"></param>
            <param name="zOffset"></param>
            <param name="zRadius"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakeVehicleSolidSphere(InfinityScript.Entity,System.Single,System.Single)">
            <summary>
            Makes a vehicle solid with sphere size
            </summary>
            <param name="xRadius"></param>
            <param name="zOffset"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TransferMarksToNewScriptModel(InfinityScript.Entity)">
            <summary>
            Transfers any morks on this model to a new script_model(TBD
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CloneBrushModelToScriptModel(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Clones the given brush model into this script model so it can be controlled by the script
            </summary>
            <param name="brushModel"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.EnablePlayerUse(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets this entity to be usable by the given player
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DisablePlayerUse(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets this entity to be unusable by the given player
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakeScrambler(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Makes this entity into a scrambler so it will behave as a scrambler for the given player
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakePortableRadar(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Makes this entity into a portable radar so it will behave as a partable radar for the given player
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakeTrophySystem(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Makes this entity into a trophy so it will behave as a trophy system for the given player
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsSpawner(InfinityScript.Entity)">
            <summary>
            Checks if this entity is a spawner or not
            </summary>
            <returns>Returns true if this entity is a spawner</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DeleteAttractor(InfinityScript.Entity)">
            <summary>
            Deletes a missile attractor or repulsor(TBD)
            </summary>
            <param name="attractor"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetThermalBodyMaterial(System.String)">
            <summary>
            Sets the default thermal body for players
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetMissileOwner(InfinityScript.Entity)">
            <summary>
            Gets the owner of a missile or explosive
            </summary>
            <param name="explosive"></param>
            <returns>Returns the owner of the explosive</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetGlass(System.String,System.String)">
            <summary>
            Looks up an glass piece by key and name
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <returns>Returns the glass piece found with the given key and name if any</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetGlassArray(System.String,System.String)">
            <summary>
            Gets an array of glass pieces that have the given key, name pair
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <returns>Returns the glass pieces found with the given key and name in a <see cref="T:System.Array">Array</see>"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetGlassOrigin(InfinityScript.Entity)">
            <summary>
            Gets the origin of a piece of glass(TBD)
            </summary>
            <param name="glass"></param>
            <returns>Returns the origin of the glass piece</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsGlassDestroyed(InfinityScript.Entity)">
            <summary>
            Checks if the given glass entity is destroyed or not
            </summary>
            <param name="glass"></param>
            <returns>Returns true if the glass entity is destroyed</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DestroyGlass(InfinityScript.Entity)">
            <summary>
            Shatters a glass entity
            </summary>
            <param name="glass"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DeleteGlass(InfinityScript.Entity)">
            <summary>
            Deletes a glass entity
            </summary>
            <param name="glass"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetEntChannelsCount(InfinityScript.Entity)">
            <summary>
            Gets the channel count of an entity(TBD)
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetEntChannelName(InfinityScript.Entity)">
            <summary>
            Gets the channel name of an entity(TBD)
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetScriptMoverInKillcam(InfinityScript.Entity)">
            <summary>
            TBD
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetDamageState(InfinityScript.Entity,System.Int32)">
            <summary>
            Sets a helicopter's current damage state
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CloseFile(System.Int32)">
            <summary>
            Close a script-controlled file.
            </summary>
            <param name="fileNum"></param>
            <returns>Returns 1 if successful and -1 if unsuccessful</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.FGetArg(System.Int32,System.Int32)">
            <summary>
            Get a specific argument number from the current line.
            </summary>
            <param name="fileNum"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.FPrintFields(System.Int32,InfinityScript.Parameter[])">
            <summary>
            Writes items out to a script-controlled file, inserting a comma in-between each one.
            </summary>
            <param name="fileNum"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.FPrintLn(System.Int32,System.String)">
            <summary>
            Write text out to a script-controlled file.
            </summary>
            <param name="fileNum"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.FReadLn(System.Int32)">
            <summary>
            Read the next line of comma separated value text from a script-controlled file.
            </summary>
            <param name="fileNum"></param>
            <returns>Returns the number of comma separated values in the line</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.OpenFile(System.String,System.String)">
            <summary>
            Open a file for reading, writing, or appending.
            </summary>
            <param name="filename"></param>
            <param name="mode"></param>
            <returns>Returns a file number if successful, otherwise returns -1</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:InfinityScript.GSCFunctions.ChangeFontScaleOverTime(InfinityScript.HudElem,System.Single)" -->
        <member name="M:InfinityScript.GSCFunctions.ClearAllTextAfterHudelem(InfinityScript.HudElem)">
            <summary>
            Clear the config strings for the unique text set after this string. This is intended for development use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClearTargetEnt(InfinityScript.HudElem)">
            <summary>
            Clear this waypoint from targetting an entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Destroy(InfinityScript.HudElem)">
            <summary>
            Remove this Hud element altogether
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:InfinityScript.GSCFunctions.FadeOverTime(InfinityScript.HudElem,System.Single)" -->
        <member name="M:InfinityScript.GSCFunctions.FadeOverTime2(InfinityScript.HudElem)">
            <summary>
            Test fade
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MoveOverTime(InfinityScript.HudElem,System.Single)">
            <summary>
            Set a hud element to move over time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MoveOverTime2(InfinityScript.HudElem)">
            <summary>
            Test move
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.NewClientHudElem(InfinityScript.Entity)">
            <summary>
            Create a new hud element for a particular client
            </summary>
            <param name="client"></param>
            <returns>Returns a reference to the created hud element as a <see cref="T:InfinityScript.HudElem">HudElem</see>"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.NewHudElem">
            <summary>
            Create a new hud element
            </summary>
            <returns>Returns a reference to the created hud element as a <see cref="T:InfinityScript.HudElem">HudElem</see></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.NewTeamHudElem(System.String)">
            <summary>
            Create a new hud element for a particular team
            </summary>
            <param name="team"></param>
            <returns>Returns a reference to the created hud element as a <see cref="T:InfinityScript.HudElem">HudElem</see>"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Obituary(InfinityScript.Entity,InfinityScript.Entity,System.String,System.String)">
            <summary>
            Create an obituary for a character
            </summary>
            <param name="victim"></param>
            <param name="attacker"></param>
            <param name="weapon"></param>
            <param name="meansOfDeath"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Reset(InfinityScript.HudElem)">
            <summary>
            Reset a HUD element to its default state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ScaleOverTime(InfinityScript.HudElem,System.Single,System.Int32,System.Int32)">
            <summary>
            Set a hud element to scale over time.
            </summary>
            <param name="time"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetClock(InfinityScript.HudElem,System.Single,System.Single,System.String,System.Int32,System.Int32)">
            <summary>
            Set a clock HUD element to count down over a time period.
            </summary>
            <param name="time"></param>
            <param name="totalTime"></param>
            <param name="material"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetClockUp(InfinityScript.HudElem,System.Single,System.Single,System.String,System.Int32,System.Int32)">
            <summary>
            Set a clock HUD element to count up over a time period.
            </summary>
            <param name="time"></param>
            <param name="totalTime"></param>
            <param name="material"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMapNameString(InfinityScript.HudElem,System.String)">
            <summary>
            Set the map name string
            </summary>
            <param name="mapname"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetPlayerNameString(InfinityScript.HudElem,InfinityScript.Entity)">
            <summary>
            Set the player name string for a HUD element
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetPulseFX(InfinityScript.HudElem,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the hudelem string to display with a "Pulse" effect.
            </summary>
            <param name="speed"></param>
            <param name="decayStart"></param>
            <param name="decayDuration"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetShader(InfinityScript.HudElem,System.String,System.Int32,System.Int32)">
            <summary>
            Set the material for this Hud Element.
            </summary>
            <param name="material"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTargetEnt(InfinityScript.HudElem,InfinityScript.Entity)">
            <summary>
            Set the entity that this waypoint should target. In MP, entity should already be a broadcasting entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTenthsTimer(InfinityScript.HudElem,System.Single)">
            <summary>
            Set the timer HUD element to count down in tenths of a second.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTenthsTimerUp(InfinityScript.HudElem,System.Single)">
            <summary>
            Set the timer HUD element to count up in tenths of a second.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetText(InfinityScript.HudElem,System.String)">
            <summary>
            Set HUD text for this element
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTimer(InfinityScript.HudElem,System.Single)">
            <summary>
            Set the timer HUD element to count down.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTimerUp(InfinityScript.HudElem,System.Single)">
            <summary>
            Set the timer HUD element to count up.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetValue(InfinityScript.HudElem,System.Int32)">
            <summary>
            Set the value HUD element to a given value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWaypoint(InfinityScript.HudElem,System.Boolean)">
            <summary>
            Sets a HUD element to be a waypoint.
            </summary>
            <param name="constantSize"></param>
            <param name="offscreenMaterial"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWaypoint(InfinityScript.HudElem,System.Boolean,System.Boolean)">
            <summary>
            Sets a HUD element to be a waypoint.
            </summary>
            <param name="constantSize"></param>
            <param name="offscreenMaterial"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWaypoint(InfinityScript.HudElem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets a HUD element to be a waypoint.
            </summary>
            <param name="constantSize"></param>
            <param name="offscreenMaterial"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWaypoint(InfinityScript.HudElem,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets a HUD element to be a waypoint.
            </summary>
            <param name="constantSize"></param>
            <param name="offscreenMaterial"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ShowHudSplash(InfinityScript.Entity,System.String,System.Int32)">
            <summary>
            Shows a splash notification to this player
            </summary>
            <param name="splash"></param>
            <param name="slot"></param>
            <param name="optionalNum"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ShowHudSplash(InfinityScript.Entity,System.String,System.Int32,System.Int32)">
            <summary>
            Shows a splash notification to this player
            </summary>
            <param name="splash"></param>
            <param name="slot"></param>
            <param name="optionalNum"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTimerStatic(InfinityScript.HudElem,System.Single)">
            <summary>
            Set the timer HUD element to a time and freezes it
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTenthsTimerStatic(InfinityScript.HudElem,System.Single)">
            <summary>
            Set the timer HUD element to a time in tenths of a second and freezes it
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWaypointEdgeStyle_RotatingIcon(InfinityScript.HudElem)">
            <summary>
            Sets a waypoint hud to rotate along the screen while it's offscreen(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWaypointEdgeStyle_SecondaryArrow(InfinityScript.HudElem)">
            <summary>
            Sets a waypoint hud to have an arrow while offscreen(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWaypointIconOffScreenOnly(InfinityScript.HudElem)">
            <summary>
            Sets a waypoint hud to only display if it is offscreen(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Earthquake(System.Single,System.Single,InfinityScript.Vector3,System.Int32)">
            <summary>
            Create an earthquake at the given point.
            </summary>
            <param name="scale"></param>
            <param name="duration"></param>
            <param name="source"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ExitLevel(System.Boolean)">
            <summary>
            Exits the current level.
            </summary>
            <param name="savePersistent"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetNorthYaw">
            <summary>
            Gets the yaw value of North
            </summary>
            <returns>Returns the yaw value of North</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetStartTime">
            <summary>
            Gets the start time for the current round
            </summary>
            <returns>Returns the start time for the current round</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetTime">
            <summary>
            Gets the level time in milliseconds from the start of the level
            </summary>
            <returns>Returns the level time in milliseconds from the start of the level</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsSplitScreen">
            <summary>
            Checks if the game is a splitscreen game
            </summary>
            <returns>Returns true if the game is a splitscreen game</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsValidGametype(System.String)">
            <summary>
            Checks if the string is a valid gametype
            </summary>
            <param name="gametype"></param>
            <returns>Returns true if the string is a valid gametype</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MapExists(System.String)">
            <summary>
            Checks if the map with the given name exists on the server
            </summary>
            <param name="mapname"></param>
            <returns>Returns true if the map with the given name exists on the server</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetClientNameMode(System.String)">
            <summary>
            Alters the way that the player name is updated, to prevent cheating by spectators altering their name to communicate with active players
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetGameEndTime(System.Int32)">
            <summary>
            Sets the time the current match will end
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMapCenter(InfinityScript.Vector3)">
            <summary>
            Set the center of the map (used by network code to optimize position data)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMiniMap(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the info for the satelite map on the compass
            </summary>
            <param name="material"></param>
            <param name="upperLeftX"></param>
            <param name="upperLeftY"></param>
            <param name="lowerRightX"></param>
            <param name="lowerRightY"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWinningPlayer(InfinityScript.Entity)">
            <summary>
            Sets the player to be the winner
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWinningTeam(System.String)">
            <summary>
            Sets a team to be the winner
            </summary>
            <param name="team"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.UpdateClientNames">
            <summary>
            Update all client names. Only works in 'manual_change' mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WorldEntNumber">
            <summary>
            Gets the Entity number for the world
            </summary>
            <returns>Returns the entity number for the world</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetSunlight(InfinityScript.Vector3)">
            <summary>
            Sets the level's sunlight color
            </summary>
            <param name="rgb"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ResetSunlight">
            <summary>
            Resets the level's sunlight color to default
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Map_Restart">
            <summary>
            Restarts the current game
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MatchEnd">
            <summary>
            Ends the current match(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.EndParty">
            <summary>
            Ends the current party
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetUAVStrengthMin">
            <summary>
            Gets the minimum uav strength
            </summary>
            <returns>Returns the minimum value of uav strength</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetUAVStrengthMax">
            <summary>
            Gets the maximum uav strength
            </summary>
            <returns>Returns the maximum value of uav strength</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetUAVStrengthLevelNeutral">
            <summary>
            Gets the neutral uav strength value
            </summary>
            <returns>Returns the neutral value of uav strength</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetUAVStrengthLevelShowEnemyFastSweep">
            <summary>
            Gets the uav strength level at which the radar will sweep for enemies in a fast speed
            </summary>
            <returns>Returns the value of uav strength that will sweep the radar fast</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetUAVStrengthLevelShowEnemyDirectional">
            <summary>
            Gets the uav strength level at which the radar will show enemy direction
            </summary>
            <returns>Returns the value of uav strength that will show enemy direction</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMatchData(InfinityScript.Parameter[])">
            <summary>
            Sets a value for the current match's data
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetMatchData(InfinityScript.Parameter[])">
            <summary>
            Gets a value of a field of the current match's data
            </summary>
            <param name="name"></param>
            <returns>Returns the value of the given field in the current match's data</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SendMatchData">
            <summary>
            Send the current match data to all clients(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClearMatchData">
            <summary>
            Clears all match data fields to default
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMatchDataDef(System.String)">
            <summary>
            Sets the current match's matchdata definition file(TBD)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMatchClientIP(InfinityScript.Entity,System.Int32)">
            <summary>
            Sets up a client's ip in the match data(TBD)
            </summary>
            <param name="client"></param>
            <param name="clientID"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMatchDataID">
            <summary>
            Sets the ID of the current match's matchdata(TBD)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetClientMatchData(InfinityScript.Parameter[])">
            <summary>
            Sets a field in the client's match 
            </summary>
            <param name="name"></param>
            <param name="dataID"></param>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetClientMatchData(InfinityScript.Parameter[])">
            <summary>
            Gets a field in the client's match data
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetClientMatchDataDef(System.String)">
            <summary>
            Sets a client's matchdata definition file
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SendClientMatchData">
            <summary>
            Send a client's current match data to the server(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetMatchRulesData(System.String,System.String[])">
            <summary>
            Gets a rule value from the current match's rules
            </summary>
            <param name="rule"></param>
            <param name="parameters"></param>
            <returns>Returns the value of the given rule</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsUsingMatchRulesData">
            <summary>
            Checks if the server is using match rules data or not
            </summary>
            <returns>Returns true if the server is using match rules data</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.EndLobby">
            <summary>
            Ends the current lobby
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetMapCustom(System.String)">
            <summary>
            Gets info from the basemaps.arena file
            </summary>
            <param name="name">The name of the variable in the arena file to get the value from</param>
            <returns>Returns the value of the given variable located in the basemaps.arena file</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.UpdateSkill(InfinityScript.Entity,InfinityScript.Entity,System.String,System.Single)">
            <summary>
            Updates the skill value for two players(TBD)
            </summary>
            <param name="attacker"></param>
            <param name="defender"></param>
            <param name="gametype"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetNorthYaw(System.Int32)">
            <summary>
            Set the north yaw value
            </summary>
            <param name="yaw"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetSlowMotion(System.Single,System.Single,System.Single)">
            <summary>
            Sets slow motion for the game, smoothing from startScale to endScale for lerpDuration time
            </summary>
            <param name="startScale"></param>
            <param name="endScale"></param>
            <param name="lerpDuration"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetExpFog(System.Single,System.Single,InfinityScript.Vector3,System.Single,System.Single,InfinityScript.Vector3,System.Single,InfinityScript.Vector3,System.Single,System.Single)">
            <summary>
            Sets this world's exponential fog values
            </summary>
            <param name="startDist"></param>
            <param name="halfwayDist"></param>
            <param name="rgb"></param>
            <param name="opacity"></param>
            <param name="transitionTime"></param>
            <param name="sunRGB"></param>
            <param name="sunOpacity"></param>
            <param name="sunDirection"></param>
            <param name="sunBeginFadeAngle"></param>
            <param name="sunEndFadeAngle"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetVehicleNode(System.String,System.String)">
            <summary>
            Looks up a vehicle node with the given key, name pair
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <returns>Returns the vehicle node found with the given key and name if any</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetVehicleNodeArray(System.String,System.String)">
            <summary>
            Gets an array of vehicle nodes that have the given key, name pair
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <returns>Returns the vehicle nodes found with the given key and name in a <see cref="T:System.Array">Array</see>"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetAllVehicleNodes">
            <summary>
            Gets all of the vehicle nodes in the current level
            </summary>
            <returns>Returns all of the vehicle nodes found in the level in a <see cref="T:System.Array">Array</see>"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetNumVehicles">
            <summary>
            Gets the current vehicle count of the level
            </summary>
            <returns>Returns the vehicle count of the level</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Vehicle_GetSpawnerArray">
            <summary>
            Gets all of the current vehicle spawners within the level
            </summary>
            <param name="weapon"></param>
            <returns>Returns all of the current vehicle spawners in the level in a <see cref="T:System.Array"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Vehicle_GetArray">
            <summary>
            Gets all of the current vehicles within the level
            </summary>
            <param name="weapon"></param>
            <returns>Returns all of the current vehicles in the level in a <see cref="T:System.Array"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetCounterTotal(System.String)">
            <summary>
            Gets the current total count of the given world stat
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IncrementCounter(System.String,System.Int32)">
            <summary>
            Increments the given world stat by the given number
            </summary>
            <param name="stat"></param>
            <param name="increment"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ACos(System.Single)">
            <summary>
            Calculates an angle corresponding to a particular cosine value
            </summary>
            <param name="cosValue"></param>
            <returns>Returns an angle corresponding to a particular cosine value</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ASin(System.Single)">
            <summary>
            Calculates an angle corresponding to a particular sin value
            </summary>
            <param name="sinValue"></param>
            <returns>Returns an angle corresponding to a particular sin value</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ATan(System.Single)">
            <summary>
            Calculates an angle corresponding to a particular tangential value
            </summary>
            <param name="tanValue"></param>
            <returns>Returns an angle corresponding to a particular tangential value</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Cos(System.Single)">
            <summary>
            Calculates the cos of an angle
            </summary>
            <param name="angle"></param>
            <returns>Returns the cos of an angle</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Int(System.Single)">
            <summary>
            Cast a floating point number or a string to an integer.
            </summary>
            <param name="value"></param>
            <returns>Returns the newly casted float/string as an int</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Float(System.String)">
            <summary>
            Cast a string to a floating point number.
            </summary>
            <param name="value"></param>
            <returns>Returns the newly casted string as a float</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PointOnSegmentNearestToPoint(InfinityScript.Vector3,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Calculates the point closest to a given point on a given line segment.
            </summary>
            <param name="segmentA"></param>
            <param name="segmentB"></param>
            <param name="point"></param>
            <returns>Returns the point nearest the given point on the given line segment</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RandomFloat(System.Single)">
            <summary>
            Randomize a floating point number that is above 0 and below the max number specified.
            </summary>
            <param name="max"></param>
            <returns>Returns the randomized float more than 0 and less than the given max</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RandomFloatRange(System.Single,System.Single)">
            <summary>
            Randomize a floating point number that is between the two ranges specified.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns>Returns the randomized float between the given ranges</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RandomInt(System.Int32)">
            <summary>
            Randomize an int that is above 0 and max-1 inclusive.
            </summary>
            <param name="max"></param>
            <returns>Returns the randomized int more than 0 and less than the given max</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RandomIntRange(System.Int32,System.Int32)">
            <summary>
            Randomize an int that is between the given ranges.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns>Returns the randomized int between the two given ranges</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Sin(System.Single)">
            <summary>
            Calculates the sin of an angle
            </summary>
            <param name="angle"></param>
            <returns>Returns the sin of an angle</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Tan(System.Single)">
            <summary>
            Calculates the tan of an angle
            </summary>
            <param name="angle"></param>
            <returns>Returns the tan of an angle</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VectorFromLineToPoint(InfinityScript.Vector3,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Calculates a vector perpendicular to the given line and pointing from the line to the given point.
            </summary>
            <param name="segmentA"></param>
            <param name="segmentB"></param>
            <param name="point"></param>
            <returns>Returns a vector perpendicular to the given line and pointing from the line to the given point</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Abs(System.Single)">
            <summary>
            Calculates the absolute value of the given input
            </summary>
            <param name="input"></param>
            <returns>Returns the absolute value of the given number</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Min(System.Single,System.Single)">
            <summary>
            Returns the given number, where the given minimum is lowest possible return value
            </summary>
            <param name="input"></param>
            <param name="minimum"></param>
            <returns>Returns the given number that is above the minimum</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Max(System.Single,System.Single)">
            <summary>
            Returns the given number, where the given maximum is highest possible return value
            </summary>
            <param name="input"></param>
            <param name="maximum"></param>
            <returns>Returns the given number that is below the maximum</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Floor(System.Single)">
            <summary>
            Gets the lowest possible value of the given number(TBD)
            </summary>
            <param name="input"></param>
            <returns>Returns the lowest possible value of the given number</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Ceil(System.Single)">
            <summary>
            Gets the highest possible value of the given number(TBD)
            </summary>
            <param name="input"></param>
            <returns>Returns the highest possible value of the given number</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Exp(System.Single)">
            <summary>
            Gets the exponent of the given number(TBD)
            </summary>
            <param name="input"></param>
            <returns>Returns the exponent of the given number</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Log(System.Single)">
            <summary>
            Calculates the log of the given number(TBD)
            </summary>
            <param name="input"></param>
            <returns>Returns the log of the given number</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Sqrt(System.Single)">
            <summary>
            Calculates the square root of the given number(TBD)
            </summary>
            <param name="input"></param>
            <returns>Returns the square root of the given number</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Squared(System.Single)">
            <summary>
            Calculates the squared value of the given number(TBD)
            </summary>
            <param name="input"></param>
            <returns>Returns the square of the given number</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a given value inbetween the min and max
            </summary>
            <param name="input"></param>
            <param name="minimum"></param>
            <param name="maximum"></param>
            <returns>Returns the given number within the maximum and minimum values</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AngleClamp(InfinityScript.Vector3,System.Single,System.Single)">
            <summary>
            Clamps a given angle inbetween the min and max
            </summary>
            <param name="angle"></param>
            <param name="minimum"></param>
            <param name="maximum"></param>
            <returns>Returns the given angle within the maximum and minimum values</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AngleClamp180(System.Single)">
            <summary>
            Clamps a given angle so that it is within 0 and 180 degrees(TBD)
            </summary>
            <param name="angle"></param>
            <returns>Returns the given angle within 0 and 180 degrees</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.OpenPopUpMenu(InfinityScript.Entity,System.String)">
            <summary>
            Opens a pop up menu over the current menu/screen
            </summary>
            <param name="menu"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.OpenPopUpMenuNoMouse(InfinityScript.Entity,System.String)">
            <summary>
            Opens a pop up menu over the current menu/screen, with no mouse control
            </summary>
            <param name="menu"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClosePopUpMenu(InfinityScript.Entity,System.String)">
            <summary>
            Closes the specified pop up menu if it is currently open
            </summary>
            <param name="menu"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.OpenMenu(InfinityScript.Entity,System.String)">
            <summary>
            Opens a menu over the current menu/screen
            </summary>
            <param name="menu"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CloseMenu(InfinityScript.Entity,System.String)">
            <summary>
            Closes the current player menu
            </summary>
            <param name="menu"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CloseInGameMenu(InfinityScript.Entity)">
            <summary>
            Closes the in-game menu for this client
            </summary>
            <param name="menu"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MoveGravity(InfinityScript.Entity,InfinityScript.Vector3,System.Int32)">
            <summary>
            Fling this entity
            </summary>
            <param name="velocity"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MoveTo(InfinityScript.Entity,InfinityScript.Vector3,System.Single)">
            <summary>
            Move this entity to the given point
            </summary>
            <param name="point"></param>
            <param name="time"></param>
            <param name="accelTime"></param>
            <param name="decelTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MoveTo(InfinityScript.Entity,InfinityScript.Vector3,System.Single,System.Single)">
            <summary>
            Move this entity to the given point
            </summary>
            <param name="point"></param>
            <param name="time"></param>
            <param name="accelTime"></param>
            <param name="decelTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MoveTo(InfinityScript.Entity,InfinityScript.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Move this entity to the given point
            </summary>
            <param name="point"></param>
            <param name="time"></param>
            <param name="accelTime"></param>
            <param name="decelTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MoveX(InfinityScript.Entity,System.Single,System.Single)">
            <summary>
            Move this entity to the given world x value
            </summary>
            <param name="point"></param>
            <param name="time"></param>
            <param name="accelTime"></param>
            <param name="decelTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MoveY(InfinityScript.Entity,System.Single,System.Single)">
            <summary>
            Move this entity to the given world y value
            </summary>
            <param name="point"></param>
            <param name="time"></param>
            <param name="accelTime"></param>
            <param name="decelTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MoveZ(InfinityScript.Entity,System.Single,System.Single)">
            <summary>
            Move this entity to the given world z value
            </summary>
            <param name="point"></param>
            <param name="time"></param>
            <param name="accelTime"></param>
            <param name="decelTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.NotSolid(InfinityScript.Entity)">
            <summary>
            Unsets the solid flag, so that this object is no longer collidable
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PhysicsLaunchClient(InfinityScript.Entity,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Permanently turn this entity into a client physics object with an initial force vector at the specified point
            </summary>
            <param name="point"></param>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PhysicsLaunchServer(InfinityScript.Entity,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Permanently turn this entity into a server physics object with an initial force vector at the specified point
            </summary>
            <param name="point"></param>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RotatePitch(InfinityScript.Entity,System.Int32,System.Single)">
            <summary>
            Rotate this entity to the given pitch
            </summary>
            <param name="pitch"></param>
            <param name="time"></param>
            <param name="accelTime"></param>
            <param name="decelTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RotateRoll(InfinityScript.Entity,System.Int32,System.Single)">
            <summary>
            Rotate this entity to the given roll angle
            </summary>
            <param name="roll"></param>
            <param name="time"></param>
            <param name="accelTime"></param>
            <param name="decelTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RotateTo(InfinityScript.Entity,InfinityScript.Vector3,System.Single)">
            <summary>
            Rotate this entity to the given world rotation value
            </summary>
            <param name="angles"></param>
            <param name="time"></param>
            <param name="accelTime"></param>
            <param name="decelTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RotateVelocity(InfinityScript.Entity,InfinityScript.Vector3,System.Single)">
            <summary>
            Rotate this entity at a particular velocity for a given time
            </summary>
            <param name="velocity"></param>
            <param name="time"></param>
            <param name="accelTime"></param>
            <param name="decelTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RotateYaw(InfinityScript.Entity,System.Int32,System.Single)">
            <summary>
            Rotate this entity to the given yaw
            </summary>
            <param name="yaw"></param>
            <param name="time"></param>
            <param name="accelTime"></param>
            <param name="decelTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Solid(InfinityScript.Entity)">
            <summary>
            Sets the solid flag, so that this object is collidable
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Vibrate(InfinityScript.Entity,InfinityScript.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Causes a script entity to vibrate, rotating around its origin, along a given vector direction
            </summary>
            <param name="direction"></param>
            <param name="amplitude"></param>
            <param name="period"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MoveSlide(InfinityScript.Entity,InfinityScript.Vector3,System.Single,InfinityScript.Vector3)">
            <summary>
            Moves this entity by sliding it(TBD)
            </summary>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StopMoveSlide(InfinityScript.Entity)">
            <summary>
            Stops this entity from sliding
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AddPitch(InfinityScript.Entity,System.Int32)">
            <summary>
            Add pitch in local space. Does not interpolate
            </summary>
            <param name="pitch"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AddYaw(InfinityScript.Entity,System.Int32)">
            <summary>
            Add yaw in local space. Does not interpolate
            </summary>
            <param name="yaw"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AddRoll(InfinityScript.Entity,System.Int32)">
            <summary>
            Add roll in local space. Does not interpolate
            </summary>
            <param name="roll"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PhysicsLaunchServerItem(InfinityScript.Entity,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Launches this item
            </summary>
            <param name="point"></param>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TransformMove(InfinityScript.Entity)">
            <summary>
            TBD, mess of variables and returns array
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PhysicsExplosionSphere(InfinityScript.Vector3,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a physics explosion in the shape of a sphere that will hit any physics objects withing the given radius
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="height"></param>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PhysicsExplosionCylinder(InfinityScript.Vector3,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a physics explosion in the shape of a cylinder that will hit any physics objects withing the given radius
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="height"></param>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PhysicsJolt(InfinityScript.Vector3,System.Int32,System.Int32,System.Int32)">
            <summary>
            Imparts a 1-frame randomly-jittered impulse on physics objects in a radius.
            </summary>
            <param name="center"></param>
            <param name="outerRadius"></param>
            <param name="innerRadius"></param>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PhysicsJitter(InfinityScript.Vector3,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Jitters physics objects touching the ground. Jitter forces are calculated in such a way as to displace the object upwards some height between min and max displacement at each point of contact with the ground.
            </summary>
            <param name="center"></param>
            <param name="outerRadius"></param>
            <param name="innerRadius"></param>
            <param name="minDisplacement"></param>
            <param name="maxDisplacement"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Objective_Add(System.Int32,System.String,System.Nullable{InfinityScript.Vector3},System.String)">
            <summary>
            Adds a new objective
            </summary>
            <param name="objectiveNumber"></param>
            <param name="state"></param>
            <param name="text"></param>
            <param name="position"></param>
            <param name="shader"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Objective_Current(System.Int32,System.Int32[])">
            <summary>
            Set which objective(s) are currently being done. If none specified, there's no current objective. Current objectives that are not specified to still be current, are set to active.
            </summary>
            <param name="objectiveIndex"></param>
            <param name="additionalIndex"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Objective_Delete(System.Int32)">
            <summary>
            Removes an objective
            </summary>
            <param name="objectiveNumber"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Objective_Icon(System.Int32,System.String)">
            <summary>
            Sets the compass icon for an objective
            </summary>
            <param name="objectiveNumber"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Objective_OnEntity(System.Int32,InfinityScript.Entity)">
            <summary>
            Sets the objective to get it's position from an entity
            </summary>
            <param name="objectiveNumber"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Objective_Position(System.Int32,InfinityScript.Vector3)">
            <summary>
            Set the position of an objective, assumed to be the zeroth position
            </summary>
            <param name="objectiveNumber"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Objective_State(System.Int32,System.String)">
            <summary>
            Set the state of an objective
            </summary>
            <param name="objectiveNumber"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Objective_Team(System.Int32,System.String)">
            <summary>
            Sets the team that the objective is for. Allows having different objectives for each team
            </summary>
            <param name="objectiveNumber"></param>
            <param name="team"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PingPlayer(InfinityScript.Entity)">
            <summary>
            Flashes a player on their teammate's compasses
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Objective_Player(System.Int32,System.Int32)">
            <summary>
            Sets the objective to get it's position from a player
            </summary>
            <param name="objectiveNumber"></param>
            <param name="playerNumber"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Objective_PlayerTeam(System.Int32,System.Int32)">
            <summary>
            Sets the objective to get it's position from a player for the player's team(TBD)
            </summary>
            <param name="objectiveNumber"></param>
            <param name="playerNumber"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Objective_PlayerEnemyTeam(System.Int32,System.Int32)">
            <summary>
            Sets the objective to get it's position from a player for the enemy team(TBD)
            </summary>
            <param name="objectiveNumber"></param>
            <param name="playerNumber"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AdsButtonPressed(InfinityScript.Entity)">
            <summary>
            Check if the player is pressing the 'ads' button
            </summary>
            <returns>Returns true if the player is pressing the 'ads' button</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AllowAds(InfinityScript.Entity,System.Boolean)">
            <summary>
            Sets whether the player can switch to ADS
            </summary>
            <param name="ads"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AllowJump(InfinityScript.Entity,System.Boolean)">
            <summary>
            Sets whether the player can jump
            </summary>
            <param name="jump"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AllowSprint(InfinityScript.Entity,System.Boolean)">
            <summary>
            Sets whether the player can sprint
            </summary>
            <param name="sprint"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AnyAmmoForWeaponModes(InfinityScript.Entity,System.String)">
            <summary>
            Checks if the player has any ammo available for the weapon or any of it's alt-modes (grenade launcher, etc)
            </summary>
            <param name="weapon"></param>
            <returns>Returns true if the player has any ammo available for the weapon or any of it's alt-modes</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AttackButtonPressed(InfinityScript.Entity)">
            <summary>
            Check if the player is pressing the 'attack' button
            </summary>
            <returns>Returns true if the player is pressing the 'attack' button</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ButtonPressed(InfinityScript.Entity,System.String)">
            <summary>
            Check if the host is pressing the button/key
            </summary>
            <param name="key"></param>
            <returns>Returns true if the host is pressing the button/key</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClearPerks(InfinityScript.Entity)">
            <summary>
            Removes all perks for a player
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DeactivateChannelVolumes(InfinityScript.Entity,System.String,System.Int32)">
            <summary>
            Deactivates the channel volumes for the player on the given priority level
            </summary>
            <param name="priority"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DeactivateReverb(InfinityScript.Entity,System.String,System.Int32)">
            <summary>
            Deactivates the sound reverbation for the player on the given priority level
            </summary>
            <param name="priority"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.FragButtonPressed(InfinityScript.Entity)">
            <summary>
            Check if the player is pressing the 'frag' button
            </summary>
            <returns>Returns true if the player is pressing the 'frag' button</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.FreezeControls(InfinityScript.Entity,System.Boolean)">
            <summary>
            Blocks or unblocks control input from this player
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetCurrentOffhand(InfinityScript.Entity)">
            <summary>
            Gets the player's current off-hand weapon
            </summary>
            <returns>Returns the name of the player's current offhand weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetCurrentWeapon(InfinityScript.Entity)">
            <summary>
            Gets the player's current weapon
            </summary>
            <returns>Returns the name of the player's current weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetCurrentWeaponClipAmmo(InfinityScript.Entity)">
            <summary>
            Gets the amount of ammo left in the player's clip
            </summary>
            <returns>Returns the amount of ammo in the player's clip</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetFractionMaxAmmo(InfinityScript.Entity,System.String)">
            <summary>
            Gets the player's current ammunition amount as a fraction of the weapon's maximum ammunition
            </summary>
            <param name="weapon"></param>
            <returns>Returns the player's current ammunition as a fraction of the weapon's maximum ammunition represented as a float</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetFractionStartAmmo(InfinityScript.Entity,System.String)">
            <summary>
            Gets the player's current ammunition amount as a fraction of the weapon's starting ammunition
            </summary>
            <param name="weapon"></param>
            <returns>Returns the player's current ammunition as a fraction of the weapon's starting ammunition represented as a float</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetNormalizedMovement(InfinityScript.Entity)">
            <summary>
            Gets the player's normalized movement vector
            </summary>
            <returns>Returns (-1, 1) for X(forward) and Y(right) based on player's input</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetNormalizedCameraMovement(InfinityScript.Entity)">
            <summary>
            Gets the player's camera's normalized movement vector
            </summary>
            <returns>Returns (-1, 1) for X(forward) and Y(right) based on player's input</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetOffhandSecondaryClass(InfinityScript.Entity)">
            <summary>
            Gets the name that toggle is set to
            </summary>
            <returns>Returns the name (either 'smoke' or 'flash') of the player's secondary offhand class</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetPlayerAngles(InfinityScript.Entity)">
            <summary>
            Gets the player's angles
            </summary>
            <returns>Returns the player's angles</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetStance(InfinityScript.Entity)">
            <summary>
            Gets the stance of the player. It only works for the player
            </summary>
            <returns>Returns the stance of the player. Possible return values are 'crouch', 'prone', and 'stand'</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetVelocity(InfinityScript.Entity)">
            <summary>
            Gets the player's cvelocity
            </summary>
            <returns>Returns the player's velocity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponAmmoClip(InfinityScript.Entity,System.String)">
            <summary>
            Gets the amount of ammo left in the player's weapon's current clip
            </summary>
            <param name="weapon"></param>
            <returns>Returns the amount of ammo left in the player's weapon's current clip</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponAmmoStock(InfinityScript.Entity,System.String)">
            <summary>
            Gets the ammunition stockpile for the given weapon
            </summary>
            <param name="weapon"></param>
            <returns>Returns the amount of reserve ammo the player has for the given weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponsList(InfinityScript.Entity)">
            <summary>
            Gets an array of all weapons that the player has. Includes any alt-mode weapons
            </summary>
            <returns>Returns an array of all the weapons that the player has, including alt-mode meapons</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponsListAll(InfinityScript.Entity)">
            <summary>
            Gets an array of all weapons that the player has. Includes any alt-mode, offhand, and exclusive weapons
            </summary>
            <returns>Returns an array of all the weapons that the player has</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponsListPrimaries(InfinityScript.Entity)">
            <summary>
            Gets an array of all primary weapons that the player has
            </summary>
            <returns>Returns an array of all the primary weapons that the player has</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponsListOffhands(InfinityScript.Entity)">
            <summary>
            Gets an array of all offhand weapons that the player has
            </summary>
            <returns>Returns an array of all the offhand weapons that the player has</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponsListItems(InfinityScript.Entity)">
            <summary>
            Gets an array of all item weapons that the player has
            </summary>
            <returns>Returns an array of all the item weapons that the player has</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponsListExclusives(InfinityScript.Entity)">
            <summary>
            Gets an array of all exclusive weapons that the player has
            </summary>
            <returns>Returns an array of all the exclusive weapons that the player has</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GiveMaxAmmo(InfinityScript.Entity,System.String)">
            <summary>
            Sets the player's ammunition to the weapon's maximum ammunition
            </summary>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GiveStartAmmo(InfinityScript.Entity,System.String)">
            <summary>
            Sets the player's ammunition to the weapon's default starting ammunition
            </summary>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GiveWeapon(InfinityScript.Entity,System.String)">
            <summary>
            Give the player a weapon
            </summary>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.HasPerk(InfinityScript.Entity,System.String)">
            <summary>
            Test if a player has a perk
            </summary>
            <param name="perk"></param>
            <returns>Returns true if the player has the perk</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.HasWeapon(InfinityScript.Entity,System.String)">
            <summary>
            Checks whether the player has the given weapon
            </summary>
            <param name="weapon"></param>
            <returns>Returns true if the player has the given weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsOnGround(InfinityScript.Entity)">
            <summary>
            Checks if the player is on the ground
            </summary>
            <returns>Returns true if the player is on ground</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MeleeButtonPressed(InfinityScript.Entity)">
            <summary>
            Check if the player is pressing the 'melee' button
            </summary>
            <returns>Returns true if the player is pressing the 'melee' button</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:InfinityScript.GSCFunctions.NotifyOnPlayerCommand(InfinityScript.Entity,System.String,System.String)" -->
        <member name="M:InfinityScript.GSCFunctions.PlayerAds(InfinityScript.Entity)">
            <summary>
            Gets the player's weapon position fraction
            </summary>
            <returns>Returns the player's weapon position fraction</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerLinkTo(InfinityScript.Entity,InfinityScript.Entity,System.String)">
            <summary>
            Attaches the player to an entity. Any entity rotation is added to the player's view, allow the player to look around. Rotating the parent entity/tag will not move the player's eye position, but only the player's view angles. Thus, the player's eye position is locked in place, always directly above the parent tag.
            </summary>
            <param name="entity"></param>
            <param name="tag"></param>
            <param name="viewFraction"></param>
            <param name="rightArc"></param>
            <param name="leftArc"></param>
            <param name="topArc"></param>
            <param name="bottomArc"></param>
            <param name="collide"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerLinkToAbsolute(InfinityScript.Entity,InfinityScript.Entity,System.String)">
            <summary>
            Attaches the player to an entity. No view movement is allowed. The player's eye position will remain fixed relative to the parent entity/tag. Thus, pitching and rolling will cause the player's eye position to move. (But the player entity always remains vertical)
            </summary>
            <param name="entity"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerLinkToDelta(InfinityScript.Entity,InfinityScript.Entity,System.String)">
            <summary>
            Attaches the player to an entity. Any entity rotation is added to the player's view, allow the player to look around. The player's eye position will remain fixed relative to the parent entity/tag. Thus, pitching and rolling will cause the player's eye position to move. (But the player entity always remains vertical)
            </summary>
            <param name="entity"></param>
            <param name="tag"></param>
            <param name="viewFraction"></param>
            <param name="rightArc"></param>
            <param name="leftArc"></param>
            <param name="topArc"></param>
            <param name="bottomArc"></param>
            <param name="useTagAngles"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayLocalSound(InfinityScript.Entity,System.String)">
            <summary>
            Plays a sound locally to the player
            </summary>
            <param name="sound"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ResetSpreadOverride(InfinityScript.Entity)">
            <summary>
            Resets the player spread value to the ones of the weapon in use
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SecondaryOffhandButtonPressed(InfinityScript.Entity)">
            <summary>
            Check if the player is pressing the 'secondary offhand' button
            </summary>
            <returns>Returns true if the player is pressing the 'secondary offhand' button</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetActionSlot(InfinityScript.Entity,System.Int32,System.String,System.String)">
            <summary>
            Sets the option to perform when the player executes (for example) '+actionslot 1'
            </summary>
            <param name="slot"></param>
            <param name="option"></param>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetChannelVolumes(InfinityScript.Entity,System.String,System.String,System.Single)">
            <summary>
            Sets the channel volumes for the player (a way of fading volumes by type)
            </summary>
            <param name="priority"></param>
            <param name="shockName"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetClientDvar(InfinityScript.Entity,System.String,InfinityScript.Parameter)">
            <summary>
            Set the values of a dvar which are specific to each client
            </summary>
            <param name="dvar"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetClientDvars(InfinityScript.Entity,System.String,InfinityScript.Parameter,InfinityScript.Parameter[])">
            <summary>
            Set the values of a list of dvars which are specific to each client
            </summary>
            <param name="dvar"></param>
            <param name="value"></param>
            <param name="additionalDvars"></param>
            <param name="additionalValues"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetDepthOfField(InfinityScript.Entity,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Set the depth of field values for a player. If start >= end for near or far, depth of field is disabled for that region
            </summary>
            <param name="nearStart"></param>
            <param name="nearEnd"></param>
            <param name="farStart"></param>
            <param name="farEnd"></param>
            <param name="nearBlur"></param>
            <param name="farBlur"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMoveSpeedScale(InfinityScript.Entity,System.Single)">
            <summary>
            Scales player movement speed by this amount
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetOffhandSecondaryClass(InfinityScript.Entity,System.String)">
            <summary>
            Set whether the player can use smoke grenades or flashbangs
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetOrigin(InfinityScript.Entity,InfinityScript.Vector3)">
            <summary>
            Set the player's origin
            </summary>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetPerk(InfinityScript.Entity,System.String)">
            <summary>
            Give the specified perk
            </summary>
            <param name="perk"></param>
            <param name="codePerk"></param>
            <param name="useSlot"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetPlayerAngles(InfinityScript.Entity,InfinityScript.Vector3)">
            <summary>
            Set the player's angles
            </summary>
            <param name="angles"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetReverb(InfinityScript.Entity,System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Set the sound reverbation for the player
            </summary>
            <param name="priority"></param>
            <param name="roomType"></param>
            <param name="dryLevel"></param>
            <param name="wetLevel"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetSpreadOverride(InfinityScript.Entity,System.Int32)">
            <summary>
            Sets the player fixed spread value
            </summary>
            <param name="spread"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetVelocity(InfinityScript.Entity,InfinityScript.Vector3)">
            <summary>
            Set the player's velocity
            </summary>
            <param name="velocity"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetViewModel(InfinityScript.Entity,System.String)">
            <summary>
            Set the player's current viewmodel
            </summary>
            <param name="viewmodel"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetViewModelDepthOfField(InfinityScript.Entity,System.Single,System.Single)">
            <summary>
            Set the depth of field values for the player's viewmodel when at hip. If start >= end, depth of field is disabled
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWeaponAmmoClip(InfinityScript.Entity,System.String,System.Int32)">
            <summary>
            Set the weapon clip ammunition for the given weapon
            </summary>
            <param name="weapon"></param>
            <param name="ammo"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWeaponAmmoStock(InfinityScript.Entity,System.String,System.Int32)">
            <summary>
            Set the ammunition stockpile for the given weapon
            </summary>
            <param name="weapon"></param>
            <param name="ammo"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ShellShock(InfinityScript.Entity,System.String,System.Single)">
            <summary>
            Start a shell shock sequence for the player. The shell shock must be precached, otherwise calling this script will cause a script error
            </summary>
            <param name="shellshock"></param>
            <param name="duration"></param>
            <param name="overrideCheat"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StopLocalSound(InfinityScript.Entity,System.String)">
            <summary>
            Stops all instances of a local soundalias running on a player
            </summary>
            <param name="sound"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StopShellShock(InfinityScript.Entity)">
            <summary>
            Stop a shell shock sequence for the player
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SwitchToOffhand(InfinityScript.Entity)">
            <summary>
            Switch to the player's offhand weapon
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SwitchToWeapon(InfinityScript.Entity,System.String)">
            <summary>
            Switch to a different weapon
            </summary>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SwitchToWeaponImmediate(InfinityScript.Entity,System.String)">
            <summary>
            Switch to a different weapon immediately, skipping any animations
            </summary>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TakeAllWeapons(InfinityScript.Entity)">
            <summary>
            Remove all the weapons from the player
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TakeWeapon(InfinityScript.Entity,System.String)">
            <summary>
            Take a weapon from the player
            </summary>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.UnSetPerk(InfinityScript.Entity,System.String,System.Boolean)">
            <summary>
            Takes the specified perk from the player
            </summary>
            <param name="perk"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.UseButtonPressed(InfinityScript.Entity)">
            <summary>
            Check if the player is pressing the 'use' button
            </summary>
            <returns>Returns true if the player is pressing the 'use' button</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ViewKick(InfinityScript.Entity,System.Int32,InfinityScript.Vector3)">
            <summary>
            Throw the screen around as if the player has been damaged
            </summary>
            <param name="force"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponLockFinalize(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Locks player's weapon onto an entity. Implies WeaponLockStart(), so this may be called to jump to a hard lock
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponLockFree(InfinityScript.Entity)">
            <summary>
            Clear the player's weapon lock
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponLockNoClearance(InfinityScript.Entity,System.Boolean)">
            <summary>
            When set true, the player will be unable to fire thair lockon weapon, and will recieve a hint print telling them that there is an obstruction
            </summary>
            <param name="noClearance"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponLockStart(InfinityScript.Entity)">
            <summary>
            Begins player's weapon lockon sequence (hud effects, etc). Will clear any existing hard lock. Use WeaponLockFinalize(this Entity entity, ) to complete lock
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponLockTargetTooClose(InfinityScript.Entity,System.Boolean)">
            <summary>
            When set true, the player will be unable to fire their lockon weapons, and will recieve a hint print telling them that they are too close
            </summary>
            <param name="tooClose"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetPlayerViewHeight(InfinityScript.Entity)">
            <summary>
            Gets the player's view height
            </summary>
            <returns>Returns the player's view height as a float</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetCurrentPrimaryWeapon(InfinityScript.Entity)">
            <summary>
            Gets the player's weapon that is in the primary slot
            </summary>
            <returns>Returns the name of the weapon in the player's primary slot</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsDualWielding(InfinityScript.Entity)">
            <summary>
            Checks if the player is currently holding a dual wield weapon
            </summary>
            <returns>Returns true if the player is holding a dual wield weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsReloading(InfinityScript.Entity)">
            <summary>
            Checks if the player is reloading
            </summary>
            <returns>Returns true if the player is reloading</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsSwitchingWeapon(InfinityScript.Entity)">
            <summary>
            Checks if the player is in the process of switching weapons
            </summary>
            <returns>Returns true if the player is switching to another weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsUsingTurret(InfinityScript.Entity)">
            <summary>
            Checks if the player is currently manning a turret
            </summary>
            <returns>Returns true if the player is manning a turret</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetOffhandPrimaryClass(InfinityScript.Entity)">
            <summary>
            Gets the name that primary offhand toggle is set to
            </summary>
            <returns>Returns the name of the player's primary offhand class</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetOffhandPrimaryClass(InfinityScript.Entity,System.String)">
            <summary>
            Sets the player's current primary offhand class
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DisableOffhandWeapons(InfinityScript.Entity)">
            <summary>
            Disables the use of offhand weapons (grenades, flashes)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.EnableOffhandWeapons(InfinityScript.Entity)">
            <summary>
            Enables the use of offhand weapons (grenades, flashes)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DisableWeaponSwitch(InfinityScript.Entity)">
            <summary>
            Disables weapon switching for the player
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.EnableWeaponSwitch(InfinityScript.Entity)">
            <summary>
            Enables weapon switching for the player
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DisableUsability(InfinityScript.Entity)">
            <summary>
            Makes the player unable to use things such as triggers, turrets, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.EnableUsability(InfinityScript.Entity)">
            <summary>
            Makes the player able to use things such as triggers, turrets, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWhizBySpreads(InfinityScript.Entity,System.Single,System.Single,System.Single)">
            <summary>
            TBD
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWhizByRadii(InfinityScript.Entity,System.Single,System.Single,System.Single)">
            <summary>
            TBD
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetVolMod(InfinityScript.Entity,System.Single,System.Single)">
            <summary>
            TBD
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetChannelVolume(InfinityScript.Entity)">
            <summary>
            Set the channel volume for the player(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetAimSpreadMovementScale(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the movement scale that the player's crosshairs spread out/in while they are moving
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetViewKickScale(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the scale of how much the player's screen gets thrown around when getting hurt
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetViewKickScale(InfinityScript.Entity)">
            <summary>
            Gets the scale of how much the player's screen gets thrown around when getting hurt
            </summary>
            <returns>Returns the scale value of how much the player's screen kicks when being hurt</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CanPlayerPlaceSentry(InfinityScript.Entity)">
            <summary>
            Checks whether the player can place a sentry in front of them as a valid position
            </summary>
            <returns>Returns 'result'(bool whether the player can place a sentry or not), 'origin'(The position of the placement, and 'angles'(The angles of the placement) all in an array</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CanPlayerPlaceTank(InfinityScript.Entity)">
            <summary>
            Checks whether the player can place a tank in front of them as a valid position
            </summary>
            <returns>Returns 'result'(bool whether the player can place a tank or not), 'origin'(The position of the placement, and 'angles'(The angles of the placement) all in an array</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VisionSetNakedForPlayer(InfinityScript.Entity,System.String)">
            <summary>
            Sets the 'naked' vision for this player
            </summary>
            <param name="vision"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VisionSetNightForPlayer(InfinityScript.Entity,System.String)">
            <summary>
            Sets the visionset for this player when they have nightvision goggles equipped
            </summary>
            <param name="vision"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VisionSetMissileCamForPlayer(InfinityScript.Entity,System.String)">
            <summary>
            Sets the visionset for this player while they are controlling a missile
            </summary>
            <param name="vision"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VisionSetThermalForPlayer(InfinityScript.Entity,System.String)">
            <summary>
            Sets the visionset for this player when they are scoped into a thermal scope
            </summary>
            <param name="vision"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VisionSetPainForPlayer(InfinityScript.Entity,System.String)">
            <summary>
            Sets the visionset for this player when they are in pain/near death
            </summary>
            <param name="vision"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetPlayerWeaponModel(InfinityScript.Entity)">
            <summary>
            Gets the weapon model of the player's current weapon
            </summary>
            <returns>Returns the model name of the player's current weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetPlayerKnifeModel(InfinityScript.Entity)">
            <summary>
            Gets the weapon model of the player's knife
            </summary>
            <returns>Returns the model name of the player's current knife</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.UpdatePlayerModelWithWeapons(InfinityScript.Entity)">
            <summary>
            Updates the player's current player model according to their current loadout
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CanMantle(InfinityScript.Entity)">
            <summary>
            Checks if the player can mantle at their current location
            </summary>
            <returns>Returns true if the player can mantle</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ForceMantle(InfinityScript.Entity)">
            <summary>
            Forces the player to mantle in their current spot regardless if they can
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Player_RecoilScaleOn(InfinityScript.Entity,System.Single)">
            <summary>
            Turns on recoil scaling if off and sets the player's current recoil scaling factor
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Player_RecoilScaleOff(InfinityScript.Entity)">
            <summary>
            Turns off recoil scaling so that they use default values
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VisionSyncWithPlayer(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Syncs this player's vision with another player's
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetEnterTime(InfinityScript.Entity)">
            <summary>
            TBD
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetGUID(InfinityScript.Entity)">
            <summary>
            Gets this player's GUID
            </summary>
            <returns>Returns the player's GUID</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetXUID(InfinityScript.Entity)">
            <summary>
            Gets this player's XUID
            </summary>
            <returns>Returns the player's XUID</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsHost(InfinityScript.Entity)">
            <summary>
            Checks if this player is the host of the current game
            </summary>
            <returns>Returns true if this player is the host of the current game</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetSpectatingPlayer(InfinityScript.Entity)">
            <summary>
            Gets the player that this player is currently spectating
            </summary>
            <returns>Returns the player that this player is currently spectating</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PredictStreamPos(InfinityScript.Entity,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            TBD
            </summary>
            <param name="origin"></param>
            <param name="angles"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetCardDisplaySlot(InfinityScript.Entity,InfinityScript.Entity,System.Int32)">
            <summary>
            Sets display slot info for this player, used for card splashes such as 'YOU KILLED', 'KILLED YOU','SPECTATING'
            </summary>
            <param name="player"></param>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetCardTitle(InfinityScript.Entity,System.String)">
            <summary>
            Sets this player's playercard title
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetCardIcon(InfinityScript.Entity,System.String)">
            <summary>
            Sets this player's playercard icon
            </summary>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetCardNamePlate(InfinityScript.Entity,System.String)">
            <summary>
            Sets this player's playercard nameplate(unused)
            </summary>
            <param name="nameplate"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LastStandRevive(InfinityScript.Entity)">
            <summary>
            Revives this player if they are in last stand or final stand
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetSpectateDefaults(InfinityScript.Entity,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Sets the default spectator starting position for this player
            </summary>
            <param name="origin"></param>
            <param name="angles"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetThirdPersonCrosshairOffset(InfinityScript.Entity)">
            <summary>
            Gets the offset for the player's crosshair when in a third person view
            </summary>
            <param name="origin"></param>
            <param name="angles"></param>
            <returns>Returns the offset for the player's crosshair when in a third person view</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DisableWeaponPickup(InfinityScript.Entity)">
            <summary>
            Disables weapon pickup for this player
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.EnableWeaponPickup(InfinityScript.Entity)">
            <summary>
            Enables weapon pickup for this player
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerLinkWeaponViewToDelta(InfinityScript.Entity,InfinityScript.Entity,System.String,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="entity"></param>
            <param name="tag"></param>
            <param name="viewFraction"></param>
            <param name="rightArc"></param>
            <param name="leftArc"></param>
            <param name="topArc"></param>
            <param name="bottomArc"></param>
            <param name="collide"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerLinkToBlend(InfinityScript.Entity,InfinityScript.Entity,System.String,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            TBD
            </summary>
            <param name="entity"></param>
            <param name="tag"></param>
            <param name="viewFraction"></param>
            <param name="rightArc"></param>
            <param name="leftArc"></param>
            <param name="topArc"></param>
            <param name="bottomArc"></param>
            <param name="collide"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerLinkedOffsetEnable(InfinityScript.Entity)">
            <summary>
            Enables setting an offset to any linked entities on this entity(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerLinkedOffsetDisable(InfinityScript.Entity)">
            <summary>
            Disables setting an offset to any linked entities on this entity(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerLinkedSetViewZNear(InfinityScript.Entity,System.Boolean)">
            <summary>
            Sets the z_near value for this player's view when the camera is linked to another entity
            </summary>
            <param name="zNear"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerLinkedSetUseBaseAngleForViewClamp(InfinityScript.Entity)">
            <summary>
            TBD
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LerpViewAngleClamp(InfinityScript.Entity)">
            <summary>
            TBD
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetViewAngleResistance(InfinityScript.Entity)">
            <summary>
            TBD
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ThermalVisionOn(InfinityScript.Entity)">
            <summary>
            Turns on thermal vision for this player
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ThermalVisionOff(InfinityScript.Entity)">
            <summary>
            Turns off thermal vision for this player
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ThermalVisionFOFOverlayOn(InfinityScript.Entity)">
            <summary>
            Turns on player target indicators so that enemy players have a red box around them
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ThermalVisionFOFOverlayOff(InfinityScript.Entity)">
            <summary>
            Turns off player target indicators
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AutospotOverlayOn(InfinityScript.Entity)">
            <summary>
            Turns on autospot so that all player names are visible
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AutospotOverlayOff(InfinityScript.Entity)">
            <summary>
            Turns off autospot so that player names are only visible when looking at them
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ForceUseHintOn(InfinityScript.Entity,System.String)">
            <summary>
            Set's a player's use hint and forces it to display. Use ForceUseHintOff() to remove it
            </summary>
            <param name="hint"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ForceUseHintOff(InfinityScript.Entity)">
            <summary>
            Removes any use hints on the player's screen
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakeSoft(InfinityScript.Entity)">
            <summary>
            Makes this entity a soft entity(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakeHard(InfinityScript.Entity)">
            <summary>
            Makes this entity a hard entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WillNeverChange(InfinityScript.Entity)">
            <summary>
            Sets a flag for this entity to tell the game that this entity will remain exactly as it is when this function is called. This will disable any script interactivity with this entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetStance(InfinityScript.Entity,System.String)">
            <summary>
            Sets this player's stance. Valid stances are 'prone', 'crouch', and 'stand'
            </summary>
            <param name="stance"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StunPlayer(InfinityScript.Entity,System.Single)">
            <summary>
            Stuns this player for the specified amount of time
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.FadeOutShellShock(InfinityScript.Entity)">
            <summary>
            Fades out any current shellshock for this player(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMotionBlurMoveScale(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the scale at which this player's vision blurs while moving
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMotionBlurTurnScale(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the scale at which this player's vision blurs while looking around
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMotionBlurZoomScale(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the scale at which this player's vision blurs while zooming in
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetPlayerSetting(InfinityScript.Entity,System.String)">
            <summary>
            Gets a setting value from this player
            </summary>
            <param name="setting"></param>
            <returns>Returns the player's value of the given setting</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetLocalPlayerProfileData(InfinityScript.Entity)">
            <summary>
            Gets data from this player's local stats(TBD)
            </summary>
            <returns>Returns the player's local value of the given stat</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetLocalPlayerProfileData(InfinityScript.Entity)">
            <summary>
            Sets a stat on this player's local stat file
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RemoteCameraSoundscapeOn(InfinityScript.Entity)">
            <summary>
            Enables sounds to be heard from the camera position if this player's camera is somewhere else
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RemoteCameraSoundscapeOff(InfinityScript.Entity)">
            <summary>
            Disables sounds to be heard from the camera position if this player's camera is somewhere else
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RadarJamOn(InfinityScript.Entity)">
            <summary>
            Jams this player's radar
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RadarJamOff(InfinityScript.Entity)">
            <summary>
            Un-jams this player's radar
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMotionTrackerVisible(InfinityScript.Entity,System.Boolean)">
            <summary>
            Sets whether this player is visible on heartbeat sensors or not
            </summary>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetMotionTrackerVisible(InfinityScript.Entity)">
            <summary>
            Gets whether this player is visible on heartbeat sensors or not
            </summary>
            <returns>Returns true if this player is visible on heartbeat sensors</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWaterSheeting(InfinityScript.Entity,System.Int32,System.Int32)">
            <summary>
            Sets a water sheet over the player's screen as if they submerged under water
            </summary>
            <param name="sheet"></param>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWeaponHudIconOverride(InfinityScript.Entity,System.String)">
            <summary>
            Sets the weapon hud icon override for this player. This will override any icon in place of the player's current offhand and replace it with the given shader
            </summary>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponHudIconOverride(InfinityScript.Entity)">
            <summary>
            Gets the current offhand weapon hud override icon this player has
            </summary>
            <param name="visible"></param>
            <returns>Returns the name of the shader that this player's offhand icon override is set to</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetEMPJammed(InfinityScript.Entity,System.Boolean)">
            <summary>
            Sets whether this player's screen is emp jammed
            </summary>
            <param name="jammed"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerSetExpFog(InfinityScript.Entity,System.Single,System.Single,InfinityScript.Vector3,System.Single)">
            <summary>
            Sets this player's exponential fog values
            </summary>
            <param name="startDist"></param>
            <param name="halfwayDist"></param>
            <param name="RGB"></param>
            <param name="transitionTime"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsItemUnlocked(InfinityScript.Entity,System.String)">
            <summary>
            Checks whether this player has the given item unlocked or not
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetPlayerData(InfinityScript.Entity,InfinityScript.Parameter[])">
            <summary>
            Gets stats from the player's playerdata
            </summary>
            <param name="data"></param>
            <returns>Returns the value of the data field</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetPlayerData(InfinityScript.Entity,InfinityScript.Parameter[])">
            <summary>
            Sets a data field in this player's playerdata
            </summary>
            <param name="data"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsUsingOnlineDataOffline(InfinityScript.Entity)">
            <summary>
            Checks if this player is currently using online data while offline
            </summary>
            <returns>Returns true if the player is using online data while offline</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetRestedTime(InfinityScript.Entity)">
            <summary>
            Gets this player's time since the last game they player, in seconds
            </summary>
            <returns>Returns the player's amount of time since their last game</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Send73Command(InfinityScript.Entity)">
             <summary>
             TBD
             </summary>
             <returns></returns>
            
        </member>
        <member name="M:InfinityScript.GSCFunctions.SendLeaderboards(InfinityScript.Entity)">
            <summary>
            Sends the current leaderboard stats to the player(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerForceDeathAnim(InfinityScript.Entity,InfinityScript.Entity,System.String,System.String,InfinityScript.Vector3)">
            <summary>
            Forces this player to start their death animations, crediting the inflictor with a kill but not killing this player
            </summary>
            <param name="inflictor"></param>
            <param name="meansOfDeath"></param>
            <param name="hitLoc"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StartAC130(InfinityScript.Entity)">
            <summary>
            Informs the game that this player is starting to ride an AC130
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StopAC130(InfinityScript.Entity)">
            <summary>
            Informs the game that this player has stopped riding an AC130
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CanSpawn(InfinityScript.Entity,InfinityScript.Vector3)">
            <summary>
            Checks if a player can spawn at this position
            </summary>
            <param name="origin"></param>
            <returns>Returns true if a player can spawn at this position</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IPrintLn(InfinityScript.Entity,System.String)">
            <summary>
            Write a line to this player's screen.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IPrintLnBold(InfinityScript.Entity,System.String)">
            <summary>
            Write a bold line to this player's screen.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerHide(InfinityScript.Entity)">
            <summary>
            Hides a visible player
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsSplitScreenPlayer(InfinityScript.Entity)">
            <summary>
            Checks if the player is a splitscreen player
            </summary>
            <returns>Returns true if the player is a splitscreen player</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsSplitScreenPlayerPrimary(InfinityScript.Entity)">
            <summary>
            Checks if the player is the primary splitscreen player
            </summary>
            <returns>Returns true if the player is the primary splitscreen player</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TrackerUpdate(InfinityScript.Entity,System.String,System.Int32)">
            <summary>
            Updates values of the given leaderboard stat from the leaderboard tracker for this player
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ThermalDrawEnable(InfinityScript.Entity)">
            <summary>
            Causes player models to be drawn as if they are seen in thermal mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ThermalDrawDisable(InfinityScript.Entity)">
            <summary>
            Turns off drawing player models in thermal mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheHeadIcon(System.String)">
            <summary>
            Precache a head icon
            </summary>
            <param name="headicon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheItem(System.String)">
            <summary>
            Precaches a given item. It must be called before any wait statements in the level script
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheLocationSelector(System.String)">
            <summary>
            Precaches a material to be used as an indicator during location selection on the map
            </summary>
            <param name="material"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheMenu(System.String)">
            <summary>
            Precaches this menu
            </summary>
            <param name="menu"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheModel(System.String)">
            <summary>
            Precaches the given model. It must be called before any wait statements in the level script
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheRumble(System.String)">
            <summary>
            Precaches the given rumble. It must be called before any wait statements in the level script
            </summary>
            <param name="rumble"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheShader(System.String)">
            <summary>
            Precaches the given shader. It must be called before any wait statements in the level script
            </summary>
            <param name="material"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheShellShock(System.String)">
            <summary>
            Precaches the shellshock effect. It must be called before any wait statements in the level script
            </summary>
            <param name="shellshock"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheStatusIcon(System.String)">
            <summary>
            Precaches a status icon
            </summary>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheString(System.String)">
            <summary>
            Precaches the given string. It must be called before any wait statements in the level script
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheVehicle(System.String)">
            <summary>
            Precaches the weapon info structure for a vehicle. It must be called before any wait statements in the level script
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TableLookupIString(System.String,System.Int32,InfinityScript.Parameter,System.Int32)">
            <summary>
            Look up a row in a table and pull out a particular column from that row in an IString
            </summary>
            <param name="filename"></param>
            <param name="column"></param>
            <param name="value"></param>
            <param name="columnReturn"></param>
            <returns>Returns the value pulled from the given row and column as an IString</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TableLookup(System.String,System.Int32,InfinityScript.Parameter,System.Int32)">
            <summary>
            Look up a row in a table and pull out a particular column from that row
            </summary>
            <param name="filename"></param>
            <param name="column"></param>
            <param name="value"></param>
            <param name="columnReturn"></param>
            <returns>Returns the value pulled from the given row and column</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheFXTeamThermal(System.Int32,System.String)">
            <summary>
            Precaches a thermal effect for use on the specified tag
            </summary>
            <param name="effect"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheMiniMapIcon(System.String)">
            <summary>
            Precache a minimap icon
            </summary>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheMpAnim(System.String)">
            <summary>
            Precache an <see cref="!:Animation"/>
            </summary>
            <param name="anim"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheLeaderboards(System.String)">
            <summary>
            Precache a leaderboard definition
            </summary>
            <param name="leaderboard"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TableLookupByRow(System.String,System.Int32,System.Int32)">
            <summary>
            Look up a row and column in a table and pull out that particular value
            </summary>
            <param name="filename"></param>
            <param name="row"></param>
            <param name="column"></param>
            <returns>Returns the value pulled from the given row and column</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TableLookupIStringByRow(System.String,System.Int32,System.Int32)">
            <summary>
            Look up a row and column in a table and pull out a particular value from that row in an IString
            </summary>
            <param name="filename"></param>
            <param name="row"></param>
            <param name="column"></param>
            <returns>Returns the value pulled from the given row and column as an IString</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TableLookupRowNum(System.String,System.Int32,InfinityScript.Parameter)">
            <summary>
            Look up a column in a table and gets the row number of the given value
            </summary>
            <param name="filename"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns>Returns the row number pulled from the given column</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PreCacheTurret(System.String)">
            <summary>
            Precaches a weapon for turret use.
            </summary>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayRumbleLoopOnEntity(InfinityScript.Entity,System.String)">
            <summary>
            Plays a looping controller rumble on the given player
            </summary>
            <param name="rumble"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayRumbleLoopOnPosition(System.String,InfinityScript.Vector3)">
            <summary>
            Plays a looping rumble at a given position
            </summary>
            <param name="rumble"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayRumbleOnEntity(InfinityScript.Entity,System.String)">
            <summary>
            Plays a rumble on the given entity
            </summary>
            <param name="rumble"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayRumbleOnPosition(System.String,InfinityScript.Vector3)">
            <summary>
            Plays a rumble at a given position
            </summary>
            <param name="rumble"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StopAllRumbles">
            <summary>
            Stops all of the current rumbles
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StopRumble(InfinityScript.Entity,System.String)">
            <summary>
            Quits the playing of a particular rumble on a player
            </summary>
            <param name="rumble"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetEye(InfinityScript.Entity)">
            <summary>
            Gets the position of the eye for an AI or player
            </summary>
            <returns>Returns the position of the eye for the given AI or Player</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsAlive(InfinityScript.Entity)">
            <summary>
            Checks whether the entity is alive
            </summary>
            <param name="entity"></param>
            <returns>Returns true if the entity is alive</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsPlayer(InfinityScript.Entity)">
            <summary>
            Checks whether the entity is a player
            </summary>
            <param name="entity"></param>
            <returns>Returns true if the entity is a player</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AmbientPlay(System.String)">
            <summary>
            Play the given piece of ambient sound
            </summary>
            <param name="ambient"></param>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AmbientStop">
            <summary>
            Stop all ambient sounds (excluding the music track)
            </summary>
            <param name="fade"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayLoopSound(InfinityScript.Entity,System.String)">
            <summary>
            Play a sound as a loop
            </summary>
            <param name="sound"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlaySound(InfinityScript.Entity,System.String)">
            <summary>
            Play a sound alias as if coming from the entity
            </summary>
            <param name="sound"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlaySoundAsMaster(InfinityScript.Entity,System.String)">
            <summary>
            Play a sound alias as if coming from the entity, as a master sound
            </summary>
            <param name="sound"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlaySoundToPlayer(InfinityScript.Entity,System.String,InfinityScript.Entity)">
            <summary>
            Play a sound alias as if coming from the entity, so that only one player can hear it
            </summary>
            <param name="sound"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlaySoundToTeam(InfinityScript.Entity,System.String,System.String,InfinityScript.Entity)">
            <summary>
            Play a sound alias as if coming from the entity, so that only one team can hear it
            </summary>
            <param name="sound"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SoundExists(System.String)">
            <summary>
            Checks if the sound alias exists
            </summary>
            <param name="alias"></param>
            <returns>Returns true if the sound alias exists</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StopLoopSound(InfinityScript.Entity)">
            <summary>
            Stop a looping sound
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StopSound(InfinityScript.Entity)">
            <summary>
            Stop all sounds on an entity. You must have a wait between Stopstrings() and Delete() or the sound will not stop
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlaySoundAtPos(InfinityScript.Vector3,System.String)">
            <summary>
            Plays a <see cref="T:System.String"/> at a world position
            </summary>
            <param name="sound"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetAC130Ambience(System.String)">
            <summary>
            Set the current ambience track for the ac130
            </summary>
            <param name="ambience"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlaceSpawnPoint(InfinityScript.Entity)">
            <summary>
            Raises a spawn point up to make sure it's not in the ground, then drops it back down onto the ground
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PositionWouldTelefrag(InfinityScript.Vector3)">
            <summary>
            Checks if the passed in origin would telefrag a player if another player was spawned there
            </summary>
            <param name="position"></param>
            <returns>Returns true if the passed in origin would telefrag a player if another player was spawned there</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Spawn(System.String,InfinityScript.Vector3)">
            <summary>
            Spawns a new entity
            </summary>
            <param name="classname"></param>
            <param name="origin"></param>
            <returns>Returns a reference to the new entity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Spawn(System.String,InfinityScript.Vector3,System.Int32,System.Int32,System.Int32)">
            <summary>
            Spawns a new entity
            </summary>
            <param name="classname"></param>
            <param name="origin"></param>
            <param name="flags"></param>
            <param name="radius"></param>
            <param name="height"></param>
            <returns>Returns a reference to the new entity</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SpawnStruct">
            <summary>
            Allocates a structure
            </summary>
            <returns>Returns a reference to the new structure as an <see cref="T:InfinityScript.Entity"></see>"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SpawnTurret(System.String,InfinityScript.Vector3,System.String)">
            <summary>
            Spawns a new turret
            </summary>
            <param name="classname"></param>
            <param name="origin"></param>
            <param name="weapon"></param>
            <returns>Returns a reference to the new turret</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SpawnVehicle(System.String,System.String,System.String,InfinityScript.Vector3,InfinityScript.Vector3,InfinityScript.Entity)">
            <summary>
            Spawns a new vehicle
            </summary>
            <param name="model"></param>
            <param name="targetname"></param>
            <param name="vehicleType"></param>
            <param name="origin"></param>
            <param name="angles"></param>
            <returns>Returns a reference to the new vehicle</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Spawn(InfinityScript.Entity,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Spawns this player at the specified position as if they are respawning
            </summary>
            <param name="origin"></param>
            <param name="angles"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SpawnPlane(InfinityScript.Entity,System.String,InfinityScript.Vector3,System.String,System.String)">
            <summary>
            Spawns a new plane entity
            </summary>
            <param name="owner"></param>
            <param name="classname"></param>
            <param name="origin"></param>
            <param name="friendlyIcon"></param>
            <param name="enemyIcon"></param>
            <returns>Returns a reference to the new plane</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SpawnHelicopter(InfinityScript.Entity,InfinityScript.Vector3,InfinityScript.Vector3,System.String,System.String)">
            <summary>
            Spawns a new helicopter entity
            </summary>
            <param name="owner"></param>
            <param name="pathStart"></param>
            <param name="forward"></param>
            <param name="vehicle"></param>
            <param name="model"></param>
            <returns>Returns a reference to the new helicopter</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CreateAttractorEnt(InfinityScript.Entity,System.Int32,System.Int32)">
            <summary>
            Creates a missile attractor on an enttiy
            </summary>
            <param name="entity"></param>
            <param name="strength"></param>
            <param name="range"></param>
            <returns>Returns a reference to the new attractor</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CreateAttractorOrigin(InfinityScript.Vector3,System.Int32,System.Int32)">
            <summary>
            Creates a missile attractor on a world position
            </summary>
            <param name="origin"></param>
            <param name="strength"></param>
            <param name="range"></param>
            <returns>Returns a reference to the new attractor</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CreateRepulsorEnt(InfinityScript.Entity,System.Int32,System.Int32)">
            <summary>
            Creates a missile repulsor on an entity
            </summary>
            <param name="entity"></param>
            <param name="strength"></param>
            <param name="range"></param>
            <returns>Returns a reference to the new repulsor</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CreateRepulsorOrigin(InfinityScript.Vector3,System.Int32,System.Int32)">
            <summary>
            Creates a missile repulsor on a world position
            </summary>
            <param name="origin"></param>
            <param name="strength"></param>
            <param name="range"></param>
            <returns>Returns a reference to the new repulsor</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetSubStr(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the substring of characters >= startIndex and endIndex. endIndex is optional
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns>Returns the substring of characters >= startIndex and endIndex</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsSubStr(System.String,System.String)">
            <summary>
            Checks if subString is a substring of text. Case sensitive
            </summary>
            <param name="text"></param>
            <param name="subString"></param>
            <returns>Returns true if the passed in subString is a substring of text</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StrTok(System.String,System.String)">
            <summary>
            Tokenizes 'text' by the delimiters 'delim'
            </summary>
            <param name="text"></param>
            <param name="delim"></param>
            <returns>Returns the array of string tokens</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ToLower(System.String)">
            <summary>
            Converts the passed in string to a lower case string
            </summary>
            <param name="text"></param>
            <returns>Returns the passed in string in lower case</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsEndStr(System.String,System.String)">
            <summary>
            Checks if endString is the ending string of text. Case sensitive
            </summary>
            <param name="text"></param>
            <param name="endString"></param>
            <returns>Returns true if the passed in endString is the ending string of text</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StriCmp(System.String,System.String)">
            <summary>
            Compares two strings to see if they are the same
            </summary>
            <param name="str1"></param>
            <param name="str2"></param>
            <returns>Returns true if the two strings are equal</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LogPrint(System.String)">
            <summary>
            Prints to the server log file
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LogString(System.String)">
            <summary>
            Writes a string to the server log file
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ResetTimeout">
            <summary>
            Resets the infinite loop check timer, to prevent an incorrect infinite loop error when a lot of script must be run
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetArchive">
            <summary>
            Depricated function, does nothing
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetAssignedTeam(InfinityScript.Entity)">
            <summary>
            Gets the player's team as assigned by matchmaking
            </summary>
            <param name="player"></param>
            <returns>Returns the player's assigned team. 0 = No Team, 1 = Axis, 2 = Allies, 3 = Spectator</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetTeamPlayersAlive(System.String)">
            <summary>
            Gets the number of players still alive on a given team
            </summary>
            <param name="team"></param>
            <returns>Returns the number of players still alive on the given team</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetTeamRadar(System.String)">
            <summary>
            Gets whether a team has radar or not
            </summary>
            <param name="team"></param>
            <returns>Returns true if the given team has radar</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetTeamScore(System.String)">
            <summary>
            Get a team's score
            </summary>
            <param name="team"></param>
            <returns>Returns the given team's score</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTeamRadar(System.String,System.Boolean)">
            <summary>
            Set whether a team has radar or not
            </summary>
            <param name="team"></param>
            <param name="availability"></param>"
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTeamScore(System.String,System.Int32)">
            <summary>
            Set a team's score
            </summary>
            <param name="team"></param>
            <param name="score"></param>"
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetPlayerTeamRank(InfinityScript.Entity,System.Int32,System.Int32)">
            <summary>
            Sets a player's current team rank
            </summary>
            <param name="player"></param>
            <param name="clientID"></param>
            <param name="rank"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTeamRadarStrength(System.String,System.Int32)">
            <summary>
            Sets a team's radar strength
            </summary>
            <param name="team"></param>
            <param name="strength"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetTeamRadarStrength(System.String)">
            <summary>
            Gets a team's radar strength
            </summary>
            <param name="team"></param>
            <returns>Returns the team's radar strength</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.BlockTeamRadar(System.String)">
            <summary>
            Blocks a team's radar
            </summary>
            <param name="team"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.UnBlockTeamRadar(System.String)">
            <summary>
            Unblocks a team's radar
            </summary>
            <param name="team"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsTeamRadarBlocked(System.String)">
            <summary>
            Checks if a team's radar is blocked
            </summary>
            <param name="team"></param>
            <returns>Returns true if the team's radar is blocked</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.BulletTrace(InfinityScript.Vector3,InfinityScript.Vector3,System.Boolean,InfinityScript.Entity)">
            <summary>
            Allows script to do a point trace with MASK_SHOT
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="hitCharacters"></param>
            <param name="ignore"></param>
            <returns>Returns hit position, hit entity, and hit surface normal in an array</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.BulletTracePassed(InfinityScript.Vector3,InfinityScript.Vector3,System.Boolean,InfinityScript.Entity)">
            <summary>
            Allows script to do a point trace with MASK_SHOT
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="hitCharacters"></param>
            <param name="ignore"></param>
            <returns>Returns true if trace complete, else returns false</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DamageConeTrace(InfinityScript.Entity,InfinityScript.Vector3,InfinityScript.Entity)">
            <summary>
            Determines how much the entity can be damaged from the given position, using the same check that is used by grenades. Performs multiple damage traces and returns an approximation to how much of the entity is damageable from the given point (between 0 and 1). In SinglePlayer this will always be 1 if the entity is partially damageable.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns>Returns the approximation of how much of the entity is damageable as a float</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PhysicsTrace(InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Physics trace, ignoring characters
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns>Returns the endpos vector of the trace</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PlayerPhysicsTrace(InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Physics trace using player capsule size, ignoring characters
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns>Returns the endpos vector of the trace</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SightConeTrace(InfinityScript.Entity,InfinityScript.Vector3,InfinityScript.Entity)">
            <summary>
            Determines how much the entity can be seen from the given position, using the same check that is used by grenades. Performs multiple sight traces and returns an approximation to how much of the entity is visible from the given point (between 0 and 1). In SinglePlayer this will always be 1 if the entity is partially visible.
            </summary>
            <param name="position"></param>
            <param name="ignore"></param>
            <returns>Returns the approximation of how much of the entity is visible from the given position as a float</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SightTracePassed(InfinityScript.Vector3,InfinityScript.Vector3,System.Boolean,InfinityScript.Entity[])">
            <summary>
            Allows script to do a point trace with MASK_OPAQUE_AI
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="hitCharacters"></param>
            <param name="ignore"></param>
            <returns>Returns true if trace complete, else returns false</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SpawnSightTrace(InfinityScript.Entity,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Traces sight from a spawnpoint to a location to determine how much of the location can be seen from the given spawn
            </summary>
            <param name="spawnpoint"></param>
            <param name="origin"></param>
            <param name="end"></param>
            <returns>Returns the value of how much the player can be seen from this spawn as a float</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.PhysicsTraceNormal(InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Physics trace, ignoring characters
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns>Returns the hit normal of the trace</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AverageNormal(System.Array)">
            <summary>
            Calculates an average normal out of the given normals
            </summary>
            <param name="normals"></param>
            <returns>Returns the average normal of the given normals</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WorldPointInReticle_Circle(InfinityScript.Entity,InfinityScript.Vector3,System.Int32,System.Int32)">
            <summary>
            Checks if the given origin is within the player's reticle circle
            </summary>
            <param name="origin"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns>Returns true if the given origin is within the player's reticle circle, false otherwise</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClientClaimTrigger(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Claim a single user trigger
            </summary>
            <param name="trigger"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClientReleaseTrigger(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Release a single user trigger
            </summary>
            <param name="trigger"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ReleaseClaimedTrigger(InfinityScript.Entity)">
            <summary>
            Release a currently claimed trigger
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClearTargetEntity(InfinityScript.Entity)">
            <summary>
            Clears the current target for this turret
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetTurretTarget(InfinityScript.Entity)">
            <summary>
            Gets the current target of this turret
            </summary>
            <returns>Returns the target entity of the turret</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsFiringTurret(InfinityScript.Entity)">
            <summary>
            Checks whether this turret is firing. Must be called on a turret
            </summary>
            <returns>Returns true if this turret is firing</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RestoreDefaultDropPitch(InfinityScript.Entity)">
            <summary>
            Restores the pitch of the turret when it drops to the ground. Recalculates based on current collision environment. Use this if you move a turret and need to reconfigure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetAISpread(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the spread of this turret when used by an AI
            </summary>
            <param name="spread"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetBottomArc(InfinityScript.Entity,System.Int32)">
            <summary>
            Set the amount that the turret can pivot down
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetConvergenceTime(InfinityScript.Entity,System.Single,System.String)">
            <summary>
            Sets the time that a turret takes to converge to it's target, on either the pitch or yaw planes
            </summary>
            <param name="time"></param>
            <param name="type"></param>"
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetDefaultDropPitch(InfinityScript.Entity,System.Single)">
            <summary>
            Set the default drop pitch that the turret attempts to return to when it is not in use
            </summary>
            <param name="pitch"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetLeftArc(InfinityScript.Entity,System.Int32)">
            <summary>
            Set the amount that the turret can move to the left
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMode(InfinityScript.Entity,System.String)">
            <summary>
            Set the mode of a turret
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetPlayerSpread(InfinityScript.Entity,System.Single)">
            <summary>
            Set the spread of this turret when used by the player
            </summary>
            <param name="spread"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetRightArc(InfinityScript.Entity,System.Int32)">
            <summary>
            Set the amount that the turret can move to the right
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetSupressionTime(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the time that a turret uses supressing fire after losing sight of an enemy
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTargetEntity(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets the target of this turret
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTopArc(InfinityScript.Entity,System.Int32)">
            <summary>
            Set the amount that the turret can pivot up
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTurretTeam(InfinityScript.Entity,System.String)">
            <summary>
            Sets the team of a turret
            </summary>
            <param name="team"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ShootTurret(InfinityScript.Entity)">
            <summary>
            Shoots a turret
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StartFiring(InfinityScript.Entity)">
            <summary>
            Starts a turret firing
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StopFiring(InfinityScript.Entity)">
            <summary>
            Stops a turret firing
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TurretFireDisable(InfinityScript.Entity)">
            <summary>
            Disable a turret's ability to fire
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TurretFireEnable(InfinityScript.Entity)">
            <summary>
            Enable a turret's ability to fire
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StartBarrelSpin(InfinityScript.Entity)">
            <summary>
            Starts spinning the barrel of a turret
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StopBarrelSpin(InfinityScript.Entity)">
            <summary>
            Stops spinning the barrel of a turret
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetBarrelSpinRate(InfinityScript.Entity)">
            <summary>
            Gets the rate at which this turret's barrel is spinning
            </summary>
            <returns>Returns the rate at which this turret's barrel is spinning</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RemoteControlTurret(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets this player to start controlling a turret. Any player input will be directed to the turret
            </summary>
            <param name="turret"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RemoteControlTurretOff(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets this player to no longer control a currently controlled turret
            </summary>
            <param name="turret"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetTurretOwner(InfinityScript.Entity)">
            <summary>
            Gets the owner of this turret
            </summary>
            <returns>Returns the owner of this turret</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetSentryOwner(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets the owner of this sentry
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetSentryCarrier(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets the passed in player as the carrier of this sentry. This will cause the sentry to lock to the player for placement
            </summary>
            <param name="carrier"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTurretMinimapVisible(InfinityScript.Entity,System.Boolean)">
            <summary>
            Sets whether this turret is visible on the minimap or not
            </summary>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SnapToTargetEntity(InfinityScript.Entity)">
            <summary>
            Snaps this turret to it's currently assigned target entity(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetConvergenceHeightPercent(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the percent that a turret converges to it's target based on height(TBD)
            </summary>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakeTurretSolid(InfinityScript.Entity)">
            <summary>
            Makes this turret solid so that players can collide with it
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakeTurretOperable(InfinityScript.Entity)">
            <summary>
            Makes this turret operable by players or AI
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MakeTurretInOperable(InfinityScript.Entity)">
            <summary>
            Makes this turret inoperable
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTurretAccuracy(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the accuracy of this turret while using it(TBD)
            </summary>
            <param name="accuracy"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetAutoRotationDelay(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the delay on the auto rotation of this turret(TBD)
            </summary>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTurretModeChangeWait(InfinityScript.Entity,System.Boolean)">
            <summary>
            Sets whether this turret should wait for it's mode to change or not(TBD)
            </summary>
            <param name="wait"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RemoteControlVehicle(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets this player to start controlling a vehicle. Any player input will be directed to the vehicle
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RemoteControlVehicleOff(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets this player to stop controlling a vehicle
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsFiringVehicleTurret(InfinityScript.Entity)">
            <summary>
            Checks if this player is firing a vehicle's turret
            </summary>
            <returns>Returns true if the player is firing a vehicle's turret</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DriveVehicleAndControlTurret(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets this player to start controlling a vehicle and be able to fire the vehicle's attached turret
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DriveVehicleAndControlTurretOff(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets this player to stop controlling a vehicle and it's turret
            </summary>
            <param name="vehicle"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetMode(InfinityScript.Entity)">
            <summary>
            Gets the current mode of this turret
            </summary>
            <returns>Returns this turret's current mode</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CanSpawnTurret">
            <summary>
            Checks if the game can spawn another turret
            </summary>
            <returns>Returns true if the game can spawn another turret</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsDefined(InfinityScript.Parameter)">
            <summary>
            Checks whether this entity/variable is defined
            </summary>
            <param name="variable"></param>
            <returns>Returns true if this entity/variable is defined</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsString(InfinityScript.Parameter)">
            <summary>
            Checks whether this entity/variable is a string
            </summary>
            <param name="variable"></param>
            <returns>Returns true if this entity/variable is a string</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetArrayKeys(System.Array)">
            <summary>
            Gets an Array consisting of the keys in the input array
            </summary>
            <param name="array"></param>
            <returns>Returns an array consisting of the keys in the given array</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetFirstArrayKey(System.Array)">
            <summary>
            Gets the first array keyin an array(TBD)
            </summary>
            <param name="array"></param>
            <returns>Returns the first array key  in the array</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetNextArrayKey(System.Array,System.Int32)">
            <summary>
            Gets the next array key after the given index in an array(TBD)
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns>Returns the next array key after the given index in the array</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SortByDistance(System.Array,InfinityScript.Vector3)">
            <summary>
            Sorts the given array in accordance to distance from the given position
            </summary>
            <param name="array"></param>
            <param name="position"></param>
            <returns>Returns the newly sorted array</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AnglesToForward(InfinityScript.Vector3)">
            <summary>
            Calculates the forward vector corresponding to a set of angles
            </summary>
            <param name="angles"></param>
            <returns>Returns the forward vector corresponding to a set of angles</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AnglesToRight(InfinityScript.Vector3)">
            <summary>
            Calculates the right vector corresponding to a set of angles
            </summary>
            <param name="angles"></param>
            <returns>Returns the right vector corresponding to a set of angles</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AnglesToUp(InfinityScript.Vector3)">
            <summary>
            Calculates the up vector corresponding to a set of angles
            </summary>
            <param name="angles"></param>
            <returns>Returns the up vector corresponding to a set of angles</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Closer(InfinityScript.Vector3,InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Tests which of two points is the closest
            </summary>
            <param name="reference"></param>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns>Returns true if pointA is closer to the reference than pointB</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CombineAngles(InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Reorients anglesB to anglesA
            </summary>
            <param name="anglesA"></param>
            <param name="anglesB"></param>
            <returns>Returns anglesB reoriented by anglesA</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Distance(InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Calculates the distance between two points
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns>Returns the distance between the two points</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Distance2D(InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Calculates the distance between two points, ignores height difference
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns>Returns the distance between the two points, ignoring height difference</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DistanceSquared(InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Calculates the squared distance between two points. This is cheaper than the actual distance as it doesn't involve a square root
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns>Returns the squared distance between the two points</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Length(InfinityScript.Vector3)">
            <summary>
            Calculates the length of the given vector
            </summary>
            <param name="vector"></param>
            <returns>Returns the length of the given vector</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.LengthSquared(InfinityScript.Vector3)">
            <summary>
            Calculates the squared length for the given vector. This is cheaper than the actual vector length as it doesn't involve a square root
            </summary>
            <param name="vector"></param>
            <returns>Returns the squared length of the given vector</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VectorDot(InfinityScript.Vector3,InfinityScript.Vector3)">
            <summary>
            Calculates the dot product of two vectors
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns>Returns the dot product of the two vectors</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VectorLerp(InfinityScript.Vector3,InfinityScript.Vector3,System.Single)">
            <summary>
            Linear interpolates between two vectors
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="fraction"></param>
            <returns>Returns the current interpolated position at fraction</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VectorNormalize(InfinityScript.Vector3)">
            <summary>
            Calculates a normalized copy of this vector
            </summary>
            <param name="vector"></param>
            <returns>Returns the normalized copy of the given vector</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VectorToAngles(InfinityScript.Vector3)">
            <summary>
            Calculates a set of angles corresponding to the given vector
            </summary>
            <param name="vector"></param>
            <returns>Returns the angles corresponding to the given vector</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VectorToYaw(InfinityScript.Vector3)">
            <summary>
            Calculates a yaw value corresponding to the given vector
            </summary>
            <param name="vector"></param>
            <returns>Returns the angles corresponding to the given vector</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetPointInBounds(InfinityScript.Entity,InfinityScript.Vector3)">
            <summary>
            Gets the closest point in bounds of the entity from the passed in position
            </summary>
            <param name="point"></param>
            <returns>Returns the closest point in bounds from the given position</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetGroundPosition(InfinityScript.Vector3)">
            <summary>
            Gets the normal ground position of the given position
            </summary>
            <param name="origin"></param>
            <returns>Returns the ground position at the given coordinates</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AveragePoint(System.Array)">
            <summary>
            Calculates an average point out of the given points
            </summary>
            <param name="points"></param>
            <returns>Returns the average point of the given points</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DisableGrenadeTouchDamage(InfinityScript.Entity)">
            <summary>
            Disable grenade damage for damage triggers
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.EnableGrenadeTouchDamage(InfinityScript.Entity)">
            <summary>
            Enable grenade damage for damage triggers
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetAmmoCount(InfinityScript.Entity,System.String)">
            <summary>
            Get the remaining ammo
            </summary>
            <param name="weapon"></param>
            <returns>Returns the remaining ammo in the given weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponModel(System.String)">
            <summary>
            Get the name of the weapon model used for the given weapon
            </summary>
            <param name="weapon"></param>
            <returns>Returns the name of the weapon model used for the given weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponHideTags(System.String,System.Int32)">
            <summary>
            Get the names of the weapon's current hide tags.
            </summary>
            <param name="weapon"></param>
            <returns>Returns the names of the weapon's current hide tags</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsWeaponClipOnly(System.String)">
            <summary>
            Checks if the weapon is clip only
            </summary>
            <param name="weapon"></param>
            <returns>Returns true if the weapon is clip only</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsWeaponDetonationTimed(System.String)">
            <summary>
            Checks if the weapon has timed detonation (e.g. frag/smoke grenades)
            </summary>
            <param name="weapon"></param>
            <returns>Returns true if the weapon has a timed detonation</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ItemWeaponSetAmmo(InfinityScript.Entity,System.Int32,System.Int32)">
            <summary>
            Sets the ammo amount for a weapon item entity (lying on the ground)
            </summary>
            <param name="clipAmmo"></param>
            <param name="reserveAmmo"></param>
            <param name="altWeapon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.MagicBullet(System.String,InfinityScript.Vector3,InfinityScript.Vector3,InfinityScript.Entity)">
            <summary>
            Fire a 'magic bullet', from the source location towards the destination
            </summary>
            <param name="weapon"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponAltWeaponName(System.String)">
            <summary>
            Gets the name of the weapon this weapon has for its alternate mode. Subsequent alternate weapons can be retrieved by calling the function again with the new weapon names until it returns the original weapon.
            </summary>
            <param name="weapon"></param>
            <returns>Returns the name of the weapon this weapon has for its alternate mode. Returns "none" if there is no alt fire</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponClass(System.String)">
            <summary>
            Gets the class of weapon that this weapon is, such as 'rifle', 'smg', 'spread', 'pistol', etc.
            </summary>
            <param name="weapon"></param>
            <returns>Returns the class of weapon that the weapon is</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponClipSize(System.String)">
            <summary>
            Gets the weapon clip size for the given weapon
            </summary>
            <param name="weapon"></param>
            <returns>Returns the weapon clip size of the given weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponFireTime(System.String)">
            <summary>
            Get the weapon fire time for the given weapon
            </summary>
            <param name="weapon"></param>
            <returns>Returns the weapon fire time for the given weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponInventoryType(System.String)">
            <summary>
            Gets the way this weapon is stored, such as 'altmode', 'item', 'offhand', or 'primary'
            </summary>
            <param name="weapon"></param>
            <returns>Returns the way this weapon is stored</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponIsBoltAction(System.String)">
            <summary>
            Get whether this weapon has a bolt action
            </summary>
            <param name="weapon"></param>
            <returns>Returns true if the weapon has a bolt action</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponIsSemiAutomatic(System.String)">
            <summary>
            Get whether this weapon is semi automatic
            </summary>
            <param name="weapon"></param>
            <returns>Returns true if the weapon is semi automatic</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponMaxAmmo(System.String)">
            <summary>
            Gets the max amount of ammo this weapon is meant to hold. Stockpile only, not the clip
            </summary>
            <param name="weapon"></param>
            <returns>Returns the max amount of ammo this weapon is meant to hold</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponStartAmmo(System.String)">
            <summary>
            Gets the amount of ammo this weapon is meant to start with when first given to a player
            </summary>
            <param name="weapon"></param>
            <returns>Returns the amount of ammo this weapon is meant to start with when first given to a player</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponType(System.String)">
            <summary>
            Gets the type of weapon that this weapon is, such as 'bullet', 'projectile', or 'grenade'
            </summary>
            <param name="weapon"></param>
            <returns>Returns the type of weapon that this weapon is</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.KC_RegWeaponForFxRemoval(InfinityScript.Entity,System.String)">
            <summary>
            TBD
            </summary>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponHideTags(System.String)">
            <summary>
            Get the hide tags of the weapon model used for the given weapon(TBD)
            </summary>
            <param name="weapon"></param>
            <returns>Returns the names of the hide tags of the weapon model used for the given weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponIsAuto(System.String)">
            <summary>
            Get whether this weapon is fully automatic
            </summary>
            <param name="weapon"></param>
            <returns>Returns true if the weapon is fully automatic</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponInheritsPerks(System.String)">
            <summary>
            Get whether this weapon inherits a perk(TBD)
            </summary>
            <param name="weapon"></param>
            <returns>Returns true if the weapon has a perk</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponBurstCount(System.String)">
            <summary>
            Gets the burst count of a weapon
            </summary>
            <param name="weapon"></param>
            <returns>Returns the burst count of the weapon</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.WeaponHasThermalScope(System.String)">
            <summary>
            Get whether this weapon has a thermal scope
            </summary>
            <param name="weapon"></param>
            <returns>Returns true if the weapon has a thermal scope</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWeaponFlashTag(System.String)">
            <summary>
            Get the name of the weapon's flash tag
            </summary>
            <param name="weapon"></param>
            <returns>Returns the name of the weapon's flash tag</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.AttachPath(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Attaches this vehicle to the given path
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClearGoalYaw(InfinityScript.Entity)">
            <summary>
            Clear the goal yaw for this direction
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClearLookAtEnt(InfinityScript.Entity)">
            <summary>
            Clear the entity the vehicle is orienting towards
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClearTargetYaw(InfinityScript.Entity)">
            <summary>
            Clear the target yaw direction for this vehicle
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ClearTurretTarget(InfinityScript.Entity)">
            <summary>
            Clear the target for the vehicle turret
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.FireWeapon(InfinityScript.Entity,System.String,InfinityScript.Entity,System.Nullable{InfinityScript.Vector3})">
            <summary>
            Fire the vehicle's weapon
            </summary>
            <param name="barrelTag"></param>
            <param name="targetEnt"></param>
            <param name="targetOffset"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.FreeVehicle(InfinityScript.Entity)">
            <summary>
            Frees this vehicle instance
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetAttachPos(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Gets the origin and angles if the vehicle were to be attached to the path. The origin and angles are returned as a <see cref="!:ScriptArray"/> of size 2. Origin is 1st and angles is 2nd.
            </summary>
            <param name="node"></param>
            <returns>Returns the origin and angles if the vehicle were to be attached to the path.</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetGoalSpeedMPH(InfinityScript.Entity)">
            <summary>
            Gets the goal speed in miles per hour
            </summary>
            <returns>Returns the goal speed in miles per hour</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetSpeed(InfinityScript.Entity)">
            <summary>
            Gets the current speed in inches per second
            </summary>
            <returns>Returns the current speed in inches per second</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetVehicleOwner(InfinityScript.Entity)">
            <summary>
            Gets the owner of this particular vehicle
            </summary>
            <returns>Returns the owner of this particualr vehicle</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetWheelSurface(InfinityScript.Entity,System.String)">
            <summary>
            Gets the surface type of the given wheel
            </summary>
            <param name="wheel"></param>
            <returns>Returns the surface type of the given wheel as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsTurretReady(InfinityScript.Entity)">
            <summary>
            Query whether this vehicle's turret is ready for firing
            </summary>
            <returns>Returns true if this vehicle's turret is ready to fire, false otherwise.</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.JoltBody(InfinityScript.Entity,InfinityScript.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Jolts this vehicle
            </summary>
            <param name="joltPosition"></param>
            <param name="intensity"></param>
            <param name="fraction"></param>
            <param name="deceleration"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.ResumeSpeed(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the vehile to resume it's path speed
            </summary>
            <param name="acceleration"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetAcceleration(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the acceleration for this vehicle
            </summary>
            <param name="acceleration"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetAirResistance(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the speed at which air resistance maxes out
            </summary>
            <param name="maxResistanceSpeed"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetDeceleration(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the deceleration for this vehicle
            </summary>
            <param name="deceleration"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetGoalYaw(InfinityScript.Entity,System.Single)">
            <summary>
            Set the goal yaw direction for this vehicle.Goal yaw is ignored if vehicle doesn't stop at goal. Lookat entity has priority over goal yaw
            </summary>
            <param name="yaw"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetHoverParams(InfinityScript.Entity,System.Int32,System.Single,System.Single)">
            <summary>
            Set the hovering parameters
            </summary>
            <param name="radius"></param>
            <param name="speed"></param>
            <param name="accel"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetJitterParams(InfinityScript.Entity,InfinityScript.Vector3,System.Single,System.Single)">
            <summary>
            Set the jitter parameters. Set everything to 0 to stop jittering. Vehicle ignores jitter parameters when on ground
            </summary>
            <param name="range"></param>
            <param name="minPeriod"></param>
            <param name="maxPeriod"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetLookAtEnt(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Set the entity this vehicle will orient towards
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetMaxPitchRoll(InfinityScript.Entity,System.Single,System.Single)">
            <summary>
            Sets max pitch and roll angle for this vehicle.
            </summary>
            <param name="pitch"></param>
            <param name="roll"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetNearGoalNotifyDist(InfinityScript.Entity,System.Single)">
            <summary>
            Set distance near goal at which near_goal notification should be sent once.
            </summary>
            <param name="dist"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetSpeed(InfinityScript.Entity,System.Int32)">
            <summary>
            Sets the speed and acceleration for this vehicle.
            </summary>
            <param name="speed"></param>
            <param name="acceleration"></param>
            <param name="deceleration"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetSpeedImmediate(InfinityScript.Entity,System.Int32)">
            <summary>
            Sets the speed and acceleration for this vehicle instantaneously. Direction will be toward the goal direction if there is a goal, otherwise the current direction.
            </summary>
            <param name="speed"></param>
            <param name="acceleration"></param>
            <param name="deceleration"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetSwitchNode(InfinityScript.Entity,InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets a switch node for this vehicle
            </summary>
            <param name="sourceNode"></param>
            <param name="destNode"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTargetYaw(InfinityScript.Entity,System.Single)">
            <summary>
            Set the target yaw direction for this vehicle. Goal yaw has priority over target yaw.
            </summary>
            <param name="yaw"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTurningAbility(InfinityScript.Entity,System.Single)">
            <summary>
            If this is higher, helicopters can make sharper turns to match goal positions better.
            </summary>
            <param name="ability"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTurretTargetEnt(InfinityScript.Entity,InfinityScript.Entity,System.Nullable{InfinityScript.Vector3})">
            <summary>
            Set the target entity for this vehicle turret.
            </summary>
            <param name="target"></param>
            <param name="offset"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetTurretTargetVec(InfinityScript.Entity,InfinityScript.Vector3)">
            <summary>
            Set the target position for this vehicle turret.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetVehGoalPos(InfinityScript.Entity,InfinityScript.Vector3,System.Boolean)">
            <summary>
            Set the target position for this vehicle
            </summary>
            <param name="goal"></param>
            <param name="stopAtGoal"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetVehicleLookAtText(InfinityScript.Entity,System.String,System.String)">
            <summary>
            Set look at text for the vehicle
            </summary>
            <param name="text1"></param>
            <param name="text2"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetVehicleTeam(InfinityScript.Entity,System.String)">
            <summary>
            Set which team a vehicle is on
            </summary>
            <param name="team"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetVehWeapon(InfinityScript.Entity,System.String)">
            <summary>
            Set the vehicle's weapon
            </summary>
            <param name="weapon"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetWaitSpeed(InfinityScript.Entity,System.Int32)">
            <summary>
            Sets a the wait speed for for this vehicle in miles per hour.
            </summary>
            <param name="speed"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetYawSpeed(InfinityScript.Entity,System.Int32,System.Int32)">
            <summary>
            Sets the yaw speed for this vehicle
            </summary>
            <param name="speed"></param>
            <param name="acceleration"></param>
            <param name="deceleration"></param>
            <param name="overshootPercent"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.SetYawSpeedByName(InfinityScript.Entity,System.String)">
            <summary>
            Sets the yaw speed for this vehicle using a name. Possible names are 'instant', 'faster', 'fast', and 'slow'
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.StartPath(InfinityScript.Entity,System.Int32)">
            <summary>
            Starts the vehicle following this path
            </summary>
            <param name="nodeIndex"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.HeliSetAI(InfinityScript.Entity)">
            <summary>
            Set a helicopter's AI(TBD)
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.CanTurretGetTargetPoint(InfinityScript.Entity,InfinityScript.Vector3)">
            <summary>
            Checks whether a vehicle's turret can target a point
            </summary>
            <param name="target"></param>
            <returns>Returns true if this vehicle's turret can get the point, false otherwise.</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VehicleTurretControlOn(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets a player to control a vehicle's turret
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.VehicleTurretControlOff(InfinityScript.Entity,InfinityScript.Entity)">
            <summary>
            Sets a player to stop controlling a vehicle's turret
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Vehicle_Teleport(InfinityScript.Entity,InfinityScript.Vector3)">
            <summary>
            Teleports a vehicle to a location
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetAttachPos(InfinityScript.Entity)">
            <summary>
            Gets the current position of the vehicle on it's attach path(TBD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Vehicle_FinishDamage(InfinityScript.Entity,InfinityScript.Entity,InfinityScript.Entity,System.Int32,System.Int32,System.String,System.String,InfinityScript.Vector3,InfinityScript.Vector3,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Invokes damage on a vehicle
            </summary>
            <param name="inflictor"></param>
            <param name="attacker"></param>
            <param name="damage"></param>
            <param name="damageFlags"></param>
            <param name="meansOfDeath"></param>
            <param name="weapon"></param>
            <param name="point"></param>
            <param name="dir"></param>
            <param name="hitLoc"></param>
            <param name="timeOffset"></param>
            <param name="modelIndex"></param>
            <param name="partName"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.RotateYaw(InfinityScript.Entity,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rotates the yaw of a vehicle
            </summary>
            <param name="yaw"></param>
            <param name="time"></param>
            <param name="acceleration"></param>
            <param name="deceleration"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Vehicle_GetVelocity(InfinityScript.Entity)">
            <summary>
            Gets the current velocity of a vehicle
            </summary>
            <returns>Returns the current velocity of the vehicle as a <see cref="T:InfinityScript.Vector3"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetBodyVelocity(InfinityScript.Entity)">
            <summary>
            Gets the current velocity of a vehicle's body
            </summary>
            <returns>Returns the current velocity of this vehicle's body as a <see cref="T:InfinityScript.Vector3"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetSteering(InfinityScript.Entity)">
            <summary>
            Gets the current steering fraction of a vehicle
            </summary>
            <returns>Returns the current steering fraction of this vehicle as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.GetThrottle(InfinityScript.Entity)">
            <summary>
            Gets the current throttle value of a vehicle
            </summary>
            <returns>Returns the current throttle value of this vehicle as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TurnEngineOff(InfinityScript.Entity)">
            <summary>
            Turns the engine off in a vehicle
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.TurnEngineOn(InfinityScript.Entity)">
            <summary>
            Turns the engine on in a vehicle
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DriveTo(InfinityScript.Entity,InfinityScript.Vector3,System.Single)">
            <summary>
            Initiates a vehicle to drive to a specified location at a specified speed
            </summary>
            <param name="position"></param>
            <param name="speed"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.DoSpawn(InfinityScript.Entity,System.String)">
            <summary>
            Spawns a specific item on the given vehicle
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:InfinityScript.GSCFunctions.IsPhysVeh(InfinityScript.Entity)">
            <summary>
            Checks if a vehicle is a physics-based vehicle
            </summary>
            <returns>Returns true if the given vehicle is a physics-based vehicle, false otherwise.</returns>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Phys_Crash(InfinityScript.Entity)">
            <summary>
            Crashes a physics-based vehicle
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Phys_Launch(InfinityScript.Entity)">
            <summary>
            Launches a physics-based vehicle
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Phys_DisableCrashing(InfinityScript.Entity)">
            <summary>
            Disables crashing for a physics-based vehicle
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Phys_EnableCrashing(InfinityScript.Entity)">
            <summary>
            Enables crashing for a physics-based vehicle
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Phys_SetSpeed(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the speed of a physics-based vehicle
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.Phys_SetConveyerBelt(InfinityScript.Entity,System.Single)">
            <summary>
            Sets the conveyer belt speed of a physics-based vehicle(TBD)
            </summary>
        </member>
        <member name="M:InfinityScript.GSCFunctions.FreeHelicopter(InfinityScript.Entity)">
            <summary>
            Frees this helicopter instance
            </summary>
        </member>
    </members>
</doc>
